class Solution {
public:
    bool isIsomorphic(string s, string t) {
        // create the map
        // when create the map, check if the mapping is consistent (i.e. 'a' always map to 'c', etc.)
        unordered_map<char, char> m;
        for(int i = 0; i < s.size(); i++){
            if(m.find(s[i]) != m.end()){
                if(m[s[i]] != t[i]) return false;
            }
            else{
                m[s[i]] = t[i];
            }
        }
        // check if two characters map to the same character
        // note that a character may map to itself
        vector<int> temp(255, 1);
        unordered_map<char, char>::iterator it;
        for(it = m.begin(); it != m.end(); it++){
            if (temp[it->second] == 0){
                return false;
            }
            else{
                temp[it->second] = 0;
            }
        }
        
        for(int i = 0; i < s.size(); i++){
            s[i] = m[s[i]];
        }
        return t == s ? true : false;
    }
};
