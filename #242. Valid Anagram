class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.size() != t.size()) return false;
        unordered_map<char, int> charMap;
        for (int i = 0; i < s.size(); i++){
            charMap[s[i]]++;
            charMap[t[i]]--;
        }
        unordered_map<char, int>::iterator it;
        for(it = charMap.begin(); it != charMap.end(); it++){
            if (it->second != 0) return false;
        }
        return true;
    }
};


//////////////////////////////////
// since it is all lower case and we know there will be at most 26 English chars, we can use list to speed up the process
// with list, we save the search time, this method is 40% faster than the method above
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size() != t.size()) return false;
        int count[26] = {0};
        for (int i = 0 ; i < s.size(); i++){
            count[s[i] - 'a']++;
            count[t[i] - 'a']--;
        }
        for (int i = 0; i < 26; i++){
            if (count[i] != 0) return false;
        }
        return true;
    }
};
