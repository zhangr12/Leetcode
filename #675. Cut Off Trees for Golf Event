// when use auto to iterate through a complex data structure, for example, vector<vector<int>>, use auto&
// otherwise the compiler will generate a copy of the item which is slow!!!
class Comp{
public:
    bool operator()(pair<int, pair<int, int>> &p1, pair<int, pair<int, int>> &p2){
        return p1.first > p2.first;
    }
};

class Solution {
public:
    int cutOffTree(vector<vector<int>>& forest) {
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, Comp> pq;
        int m = forest.size(), n = forest[0].size();
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                if(forest[i][j] > 1) pq.push({forest[i][j], {i, j}});
            }
        }
        
        int res = 0;
        pair<int, int> crt{0, 0}, nxt;
        vector<vector<int>> moves{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        while(!pq.empty()){
            nxt = pq.top().second;
            pq.pop();
            int temp = BFS(forest, crt, nxt, moves);
            if(temp == -1) return -1;
            res += temp;
            crt = nxt;
        }
        return res;
    }
    
    int BFS(vector<vector<int>>& f, pair<int, int> &start, pair<int, int> &end, vector<vector<int>> &moves){
        queue<pair<int, int>> q;
        int steps = -1;
        q.push(start);
        vector<vector<bool>> visited(f.size(), vector<bool>(f[0].size(), false));
        visited[start.first][start.second] = true;
        while(!q.empty()){
            ++steps;
            int num = q.size();
            for(int i = 0; i < num; ++i){
                int x = q.front().first, y = q.front().second;
                if(x == end.first && y == end.second) return steps;
                q.pop();
                for(auto& m:moves){
                    int crtX = x+m[0], crtY = y+m[1];
                    if(crtX >= 0 && crtX < f.size() && crtY >= 0 && crtY < f[0].size() && f[crtX][crtY] != 0 && !visited[crtX][crtY]){
                        q.push({crtX, crtY});
                        visited[crtX][crtY] = true;;
                    }
                }
            }
        }
        return -1;
    }
};
