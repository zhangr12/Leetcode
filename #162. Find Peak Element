// O(logN) solution, check 852. Peak Index in a Mountain Array
// https://leetcode.com/problems/peak-index-in-a-mountain-array/discuss/139848/C++JavaPython-Better-than-Binary-Search
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        if(n <= 1) return 0;
        int low = 0, high = n-1;
        while(low < high){
            int mid1 = low + (high-low)/2;
            int mid2 = mid1 + 1;
            if(nums[mid1] > nums[mid2]){
                high = mid1;
            }
            else{
                low = mid2;
            }
        }
        return low;
    }
};

//////////////////////////
// O(N)
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n = nums.size();
        if(n == 0) return -1;
        if(n == 1) return 0;
        if(n == 2 && nums[0] == nums[1]) return -1;
        // check left boundary
        if(nums[0] > nums[1]) return 0;
        if(nums[n-2] < nums[n-1]) return n-1;
        
        long int l = nums[0], r = nums[2];
        
        for(int i = 1; i < nums.size()-1; i++){
            if(nums[i] > l && nums[i] > r) return i;
            l = nums[i];
            r = nums[i+2];
        }
    }
};
