// dynamic programming
class Solution {
public:
    int minimumDeleteSum(string s1, string s2) {
        int m = s1.size(), n = s2.size();
        // need m+1 by n+1 because we start from 0
        // v[i][j] means the cost to make s1.substr(0, i) and s2.substr(0, j) equal
        vector<vector<int>> v(m+1, vector<int>(n+1, 0));
        // write the first column, v[i][0] means if s2 is "", then we need to delete all s1.substr(0,i) to make them equal
        for(int i = 1; i < m+1; i++) v[i][0] = v[i-1][0] + s1[i-1];
        // fill the matrix column by column
        for(int j = 1; j < n+1; j++){
            // v[0][j] means if s1 is "", then we need to delete all s2.substr(0,j) to make them equal
            v[0][j] = v[0][j-1] + s2[j-1];
            for(int i = 1; i < m+1; i++){
                // if s1[i-1] equal to s2[j-1], then the cost will be equal to v[i-1][j-1]
                if(s1[i-1] == s2[j-1]){
                    v[i][j] = v[i-1][j-1];
                }
                else{
                    // if s1[i-1] != s2[j-1], then we either make s1.substr(0, i-1) == s2.substr(0, j) or 
                    // make s1.substr(0, i) == s2.substr(0, j-1), whichever is smaller
                    // in the first case, the new cost is v[i-1][j] + s1[i-1] since we "ignore" s1[i-1]
                    // in the second case, the new cost is v[i][j-1] + s2[j-1] since we "ignore" s2[j-1]
                    v[i][j] = min(v[i-1][j] + s1[i-1], v[i][j-1] + s2[j-1]);
                }
            }
        }
        return v[m][n];
    }
};
