class MagicDictionary {
public:
    /** Initialize your data structure here. */
    MagicDictionary() {
        
    }
    
    /** Build a dictionary through a list of words */
    void buildDict(vector<string> dict) {
        for(auto w:dict){
            for(int i = 0; i < w.size(); i++){
                string temp = w;
                temp[i] = '*';
                m[temp].insert(w);
            }
        }
    }
    
    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */
    bool search(string word) {
        for(int i = 0; i < word.size(); i++){
            string temp = word;
            temp[i] = '*';
            if(m.count(temp)){
                if(m[temp].size() > 1) return true;
                if(!m[temp].count(word)) return true;
            }
        }
        return false;
    }
private:
    unordered_map<string, set<string>> m;
};


//////////////////////////////////
class MagicDictionary {
public:
    /** Initialize your data structure here. */
    MagicDictionary() {
        
    }
    
    /** Build a dictionary through a list of words */
    void buildDict(vector<string> dict) {
        for(string word:dict) s.insert(word);
    }
    
    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */
    bool search(string word) {
        for(int i = 0; i < word.size(); i++){
            for(int j = 0; j < 26; j++){
                if(j != word[i]-'a'){
                    string temp = word;
                    temp[i] = 'a' + j;
                    if(s.find(temp) != s.end()) return true;
                }
            }
        }
        return false;
    }
    
private:
    unordered_set<string> s;
};

/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary obj = new MagicDictionary();
 * obj.buildDict(dict);
 * bool param_2 = obj.search(word);
 */
