// O(1) space, O(N) time
// same idea with normal DP, but we notice that in order to build dp[i], all the history information we need are: 
// invalid number index and dp[i-1]
// this make it possible to use constant space
class Solution {
public:
    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {
        int dp = 0, res = 0, invalid = -1;
        
        for(int i = 0; i < A.size(); i++){
            if(A[i] > R){
                dp = 0;
                invalid = i;
            }
            else if(A[i] >= L && A[i] <= R){
                dp = i - invalid;
                res += dp;
            }
            else{
                // A[i] < L
                if(i > 0){
                    res += dp;
                }
            }
        }
        return res;
    }
};


// O(N) space, O(N) time
class Solution {
public:
    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {
        int n = A.size(), res = 0, invalid = -1;
        // dp[i] means the number of valid contiguous subarray ended with A[i]
        vector<int> dp(n, 0);
        
        //initialization:
        if(A[0] >= L && A[0] <= R){
            dp[0] = 1;
        }
        // move invalid to 0 if it is greater than R
        if(A[0] > R) invalid = 0;
        res += dp[0];
        // divide into three cases
        for(int i = 1; i < n; i++){
            if(A[i] > R){
                dp[i] = 0;
                invalid = i;
            }
            else if(A[i] < L){
                dp[i] = dp[i-1];
            }
            else{
                // if A[i] is within the valid range, then the number of combinations is A[invalid+1]~A[i], A[invalid+2]~A[i], ..., A[i]
                // which is i-invalid
                dp[i] = i - invalid;
            }
            res += dp[i];
        }
        return res;
    }
};
