//Sieve of Eratosthenes algorithm
class Solution {
public:
    int countPrimes(int n) {
        vector<bool> nums(n, true);
        nums[0] = nums[1] = false;
        for(int i = 0; i < sqrt(n); i++){
            if(nums[i]){
                for(int j = i*2; j < n; j += i){
                    nums[j] = false;
                }
            }
        }
        return count(nums.begin(), nums.end(), true);
    }
};



////////////////////////////////////////
// regular method
class Solution {
public:
    int countPrimes(int n) {
        int res = 0, temp, prime = true;
        if(n <= 2) return res;
        res++;
        for(int i = 3; i < n; i++){
            temp = sqrt(i);
            prime = true;
            for(int j = 2; j < temp + 1; j++){
                if(j * (i/j) == i){
                    prime = false;
                    break;
                }
            }
            if(prime) res++;
        }
        return res;
    }
};
