class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        // idea: in graph[i], we store the courses which have i as their prerequisite
        vector<vector<int>> graph(numCourses);
        vector<int> degree(numCourses, 0);
        
        for(auto p:prerequisites){
            graph[p.second].push_back(p.first);
            degree[p.first]++;
        }
        // we use queue to store the finished courses
        queue<int> q;
        for(int i = 0; i < degree.size(); i++){
            if(degree[i] == 0) q.push(i);
        }
        // pass stores the numbers of finished courses
        int pass = 0;
        while(!q.empty()){
            // each time, pop out one finished course
            int tmp = q.front();
            q.pop();
            pass++;
            // check which course has this course as its prerequisite
            for(auto u:graph[tmp]){
                degree[u]--;
                if(degree[u] == 0) q.push(u);
            }
        }
        if(pass == numCourses) return true;
        return false;
    }
};
