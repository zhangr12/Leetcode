// topological sorting
class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        // graph[i] stores all the courses which has i as their prerequisites
        vector<vector<int>> graph(numCourses);
        // indegree[i] stores the number of prerequisites(in-degree) of course i
        vector<int> indegree(numCourses);
        
        for(auto p:prerequisites){
            graph[p.second].push_back(p.first);
            // here we do not need to check duplicate, since for this problem there is no duplicate edges
            indegree[p.first]++;
        }
        
        int finished = 0;
        queue<int> q;
        // store finished courses
        for(int i = 0; i < numCourses; i++){
            if(indegree[i] == 0){
                finished++;
                q.push(i);
            }
        }
        // use q to do topological sorting
        while(!q.empty()){
            int crt = q.front();
            q.pop();
            for(auto u:graph[crt]){
                indegree[u]--;
                if(indegree[u] == 0){
                    q.push(u);
                    finished++;
                }
            }
        }
        return finished == numCourses;
        
    }
};
