// method with reservoir sampling
class Solution {
public:
    vector<int> nums;
    Solution(vector<int> nums) {
        this->nums = nums;
    }
    
    int pick(int target) {
        int count = 0, idx;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] != target) continue;
            if((rand()%100)/100.0 <= 1.0/(1+count)) idx = i;
            count++;
        }
        return idx;
    }
};


//////////////////////////////
// method using unordered_map. O(n) extra space
class Solution {
public:
    unordered_map<int, vector<int>> m;
    Solution(vector<int> nums) {
         for(int i = 0; i < nums.size(); i++){
             if(m.find(nums[i]) == m.end()){
                 m[nums[i]] = {i};
             }
             else{
                 m[nums[i]].push_back(i);
             }
         }
    }
    
    int pick(int target) {
        return m[target][rand()%m[target].size()];
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int param_1 = obj.pick(target);
 */
