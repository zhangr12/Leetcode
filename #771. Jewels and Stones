//This is the fastest method
//1. The register keyword: tell the compilor put the register variable 
//in register of the processor instead of memory as a way to gain speed.
//2. (int)J[i] returns the corresponding position of the J[i] char in ASCII.
class Solution {
public:
    int numJewelsInStones(string J, string S) {
        int counter[128];
        for (register int i = 0; i < 128; i++){
            counter[i] = 0;
        }
        
        for (register int i = 0; J[i] != '\0'; i++){
            counter[(int)J[i]] = 1;
        }
        
        int res = 0;
        for (register int i = 0; S[i] != '\0'; i++){
            if (counter[(int)S[i]]){
                res++;
            }
        }
        return res;
    }
};


//////////////////////////////////////////////////////
//Not as fast as the method above.
//1. Use unordered_set to create a search dictionary to increase search speed.
//2. find is better than count in this case since we only want to know whether the element exist or not.
class Solution {
public:
    int numJewelsInStones(string J, string S) {
        unordered_set<char> Jmap(J.begin(), J.end());
        int res = 0;
        for (auto s:S){
            if (Jmap.find(s) != Jmap.end()){
                res++;
            }
        }
        return res;
    }
};
