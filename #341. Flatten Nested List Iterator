/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class NestedIterator {
public:
    // the idea is similar to DFS
    stack<NestedInteger> s;
    NestedInteger node;
    NestedIterator(vector<NestedInteger> &nestedList) {
        // here we push the elements into s from the end of nestedList because we are using a stack
        // since we want that when we output the number, they has the same order as in the nestedList
        for(int i = nestedList.size()-1; i >= 0; i--) s.push(nestedList[i]);
    }

    int next() {
        s.pop();
        return node.getInteger();
    }

    bool hasNext() {
        vector<NestedInteger> temp;
        while(!s.empty()){
            node = s.top();
            if(node.isInteger()) return true;
            
            temp = node.getList();
            s.pop();
            // same we before, we push from the end because we want to keep the order
            for(int i = temp.size() - 1; i >= 0; i--) s.push(temp[i]);
        }
        return false;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
