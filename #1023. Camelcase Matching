class Solution {
public:
    vector<bool> camelMatch(vector<string>& queries, string pattern) {
        vector<bool> res(queries.size());
        for(int i = 0; i < queries.size(); ++i){
            res[i] = helper(queries[i], pattern);
        }
        return res;
    }
    
    
    bool helper(string &s1, string &s2){
        if(s2.size() > s1.size()) return false;
        int idx1 = 0, idx2 = 0, m = s1.size(), n = s2.size();
        while(idx2 < n){
            if(idx1 == m) return false;
            if(s1[idx1] == s2[idx2]){
                ++idx1;
                ++idx2;
            }
            else{
                while(idx1 < m && s1[idx1] != s2[idx2]){
                    // we cannot skip current char if it is upper case letter
                    if(s1[idx1] >= 'A' && s1[idx1] <= 'Z') return false;
                    // if it is lower case, we move forward until we find the char match with current char in s2
                    ++idx1;
                }
                if(idx1 == m) return false;
                ++idx1;
                ++idx2;
            }
        }
        while(idx1 < m){
            if(s1[idx1] >= 'A' && s1[idx1] <= 'Z') return false;
            ++idx1;
        }
        return true;
    }
};
