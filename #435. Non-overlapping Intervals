/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    static bool Operator(Interval &i1, Interval &i2){
        return i1.end < i2.end;
    }
    
    // idea: this problem is equal to: find the maximum number of non-overlaping intervals
    // to solve this question, first we sort the intervals based on their end point
    // then we traverse the intervals
    // for the new interval, as long as its start point is >= than previous end point, we take it and update the end point
    int eraseOverlapIntervals(vector<Interval>& intervals) {
        sort(intervals.begin(), intervals.end(), Operator);
        
        int res = 0, crt_end = INT_MIN;
        for(auto it:intervals){
            if(it.start >= crt_end){
                crt_end = it.end;
                res++;
            }
        }
        return intervals.size() - res;
    }
};
