class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m-1, j = n-1, k = m + n - 1;
        while(i >= 0 && j >= 0){
            if(nums1[i] >= nums2[j]){
                nums1[k] = nums1[i];
                i--;
            }
            else{
                nums1[k] = nums2[j];
                j--;
            }
            k--;
        }
        while(j >= 0){
            nums1[k] = nums2[j];
            j--;
            k--;
        }
    }
};


///////////////////////////////////////////
// bad method: duplicate nums1 first
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        vector<int> temp(m, 0);
        for(int i = 0; i < m; i++) temp[i] = nums1[i];
        int i = 0, j = 0, k = 0;
        while(i < m && j < n){
            if(temp[i] < nums2[j]){
                nums1[k] = temp[i];
                i++;
            }
            else{
                nums1[k] = nums2[j];
                j++;
            }
            k++;
        }
        //cout << i << " " << j << " " << k << endl;
        if(i < m){
            for(i; i < m; i++){
                nums1[k] = temp[i];
                k++;
            }
        }
        if(j < n){
            for(j; j < n; j++){
                nums1[k] = nums2[j];
                k++;
            }
        }
    }
};
