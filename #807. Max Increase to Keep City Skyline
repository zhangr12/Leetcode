class Solution {
public:
    int maxIncreaseKeepingSkyline(vector<vector<int>>& grid) {
        if(grid.size() == 0) return 0;
        vector<int> skyline_tb(grid[0].size(), 0), skyline_lr(grid.size(), 0);
        // find skyline_tb
        for(int i = 0; i < grid[0].size(); i++){
            for (int j = 0; j < grid.size(); j++){
                if(skyline_tb[i] < grid[j][i]) skyline_tb[i] = grid[j][i];
            }
        }
        // find skyline_lr
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(skyline_lr[i] < grid[i][j]) skyline_lr[i] = grid[i][j];
            }
        }
        int res = 0;
        for(int i = 0; i < grid.size(); i++){
            for (int j = 0; j < grid[0].size(); j++){
                res += max(grid[i][j], min(skyline_lr[i], skyline_tb[j])) - grid[i][j];
            }
        }
        return res;
    }
};
