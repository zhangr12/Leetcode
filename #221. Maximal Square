// space O(N), time O(M*N)
class Solution {
public:
    // idea: dp with size the same as matrix
    // assum dp[i,j] means the maximum size of the square matrix which only contains 1s and has [i,j] as the bottom right corner
    // if(matrix[i][j] == 0) dp[i][j] = 0
    // else dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1;
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.size() == 0) return 0;
        int m = matrix.size(), n = matrix[0].size(), res = 0;
        vector<int> crt(n, 0), prev(n, 0), *pCrt, *pPrev;
        pCrt = &crt;
        pPrev = &prev;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == '0'){
                    (*pCrt)[j] = 0;
                }
                else{
                    int upleft = 0, left = 0, up = 0;
                    if(i-1 >= 0 && j-1 >= 0) upleft = (*pPrev)[j-1];
                    if(i-1 >= 0) up = (*pPrev)[j];
                    if(j-1 >= 0) left = (*pCrt)[j-1];
                    (*pCrt)[j] = min(upleft, min(up, left)) + 1;
                    res = max(res, (*pCrt)[j]);
                }
            }
            swap(pPrev, pCrt);
        }
        return res*res;
    }
};


//////////////////////////
// space O(M*N), time O(M*N)
class Solution {
public:
    // idea: dp with size the same as matrix
    // assum dp[i,j] means the maximum size of the square matrix which only contains 1s and has [i,j] as the bottom right corner
    // if(matrix[i][j] == 0) dp[i][j] = 0
    // else dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1;
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.size() == 0) return 0;
        int m = matrix.size(), n = matrix[0].size(), res = 0;
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == '0') continue;
                int upleft = 0, left = 0, up = 0;
                if(i-1 >= 0 && j-1 >= 0) upleft = dp[i-1][j-1];
                if(i-1 >= 0) up = dp[i-1][j];
                if(j-1 >= 0) left = dp[i][j-1];
                dp[i][j] = min(upleft, min(up, left)) + 1;
                res = max(res, dp[i][j]);
            }
        }
        return res*res;
    }
};
