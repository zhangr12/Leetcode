// O(1) space, O(NlogN) time
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        return helper(head, nullptr);
    }
    
    TreeNode* helper(ListNode* head, ListNode* tail){
        if(head == tail) return nullptr;
        
        ListNode *slow = head, *fast = head;
        while(fast != tail && fast->next != tail){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        TreeNode* node = new TreeNode(slow->val);
        node->left = helper(head, slow);
        node->right = helper(slow->next, tail);
        return node;
    }
};




/////////////////////////////////
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 ///////////////////////////////////
 // O(1) space, O(N) time
class Solution {
private:
    ListNode* node;
public:
    TreeNode* sortedListToBST(ListNode* head) {
        node = head;
        int len = 0;
        while(head){
            len++;
            head = head->next;
        }
        
        return helper(0, len-1);
        
    }
    
    TreeNode* helper(int l, int r){
        if(l > r) return NULL;
        
        int mid = l + (r-l)/2;
        TreeNode* left = helper(l, mid-1);
        TreeNode* crt = new TreeNode(node->val);
        
        crt->left = left;
        node = node->next;
        
        TreeNode* right = helper(mid+1, r);
        crt->right = right;
        
        return crt;
    }
};





//////////////////////////////////////
// O(N) space, O(N) time
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        vector<int> v;
        while(head){
            v.push_back(head->val);
            head = head->next;
        }
        
        return buildTree(v, 0, v.size()-1);
    }
    
    
    TreeNode* buildTree(vector<int> &v, int l, int r){
        if(l > r) return NULL;
        
        int mid = l + (r-l)/2;
        
        TreeNode* node = new TreeNode(v[mid]);
        node->left = buildTree(v, l, mid-1);
        node->right = buildTree(v, mid+1, r);
        
        return node;
    }
};
