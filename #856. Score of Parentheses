class Solution {
public:
    int scoreOfParentheses(string S) {
        if(S.size() == 0) return 0;
        
        stack<int> s;
        for(int i = 0; i < S.size(); i++){
            if(S[i] == '('){
                s.push(0);
            }
            else{
                if(s.top() == 0){
                    s.top() = 1;
                }
                else{
                    int temp = 0;
                    while(!s.empty() && s.top() != 0){
                        temp += s.top();
                        s.pop();
                    }
                    s.top() = temp*2;
                }
            }
        }
        while(s.size() > 1){
            int temp = s.top();
            s.pop();
            s.top() += temp;
        }
        return s.top();
    }
};

////////////////////////////
// Use i to iterate through A from left-to-right and keep track of the depth of parens. 
// When a left paren is found, increment the depth by 1 and when a right paren is found, 
// decrement the depth by 1. 
// The score is updated when () is found in A by adding onto the existing score the value 2^d ( i.e. 1 bit-shifted-left by depth ).
class Solution {
public:
    int scoreOfParentheses(string S) {
        int res = 0, layers = 0;
        for(int i = 0; i < S.size(); i++){
            if(S[i] == '(' && S[i+1] == ')'){
                res += pow(2, layers);
                i++;
            }
            else if(S[i] == '('){
                layers++;
            }
            else{
                layers--;
            }
        }
        return res;
    }
};



////////////////////////////////
// use bit manipulation instead of pow
class Solution {
public:
    int scoreOfParentheses(string S) {
        int res = 0, layers = 0;
        for(int i = 0; i < S.size(); i++){
            if(S[i] == '(' && S[i+1] == ')'){
                res += 1 << layers;
                i++;
            }
            else if(S[i] == '('){
                layers++;
            }
            else{
                layers--;
            }
        }
        return res;
    }
};
