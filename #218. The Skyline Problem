class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        // position, height
		vector<vector<int>> points;
		
		for(auto& b:buildings){
			points.push_back({b[0], -b[2]});
			points.push_back({b[1], b[2]});
		}
		
		sort(points.begin(), points.end(), [](vector<int> &p1, vector<int> &p2){ 
			if(p1[0] == p2[0]){
				return p1[1] < p2[1];
			}
			return p1[0] < p2[0];
		});
		
		map<int, int, greater<int>> m;
		
		m[0] = 1;
		
		int prev = 0, crt;
		vector<vector<int>> res;
		for(auto& p:points){
            // cout << p[0] << " " << p[1] << endl;
			if(p[1] < 0){
				++m[-p[1]];
			}
			else{
				--m[p[1]];
				if(m[p[1]] == 0) m.erase(p[1]);
			}
			
			crt = m.begin()->first;
			
			if(crt != prev){
				res.push_back({p[0], crt});
				prev = crt;
			}
		}
		return res;
    }
};
