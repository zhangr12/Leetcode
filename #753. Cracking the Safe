class Solution {
public:
    // De Bruijn sequence + DFS
    string crackSafe(int n, int k) {
        unordered_set<string> visited;
        
        string password(n, '0');
        
        visited.insert(password);
        
        int totalNum = pow(k, n);
        
        DFS(visited, password, n, k, totalNum);
        
        return password;
    }
    
    bool DFS(unordered_set<string> &visited, string &password, int n, int k, int total){
        if(visited.size() == total) return true;
        
        string temp = password.substr(password.size()-n+1);
        
        for(char i = '0'; i < '0'+k; ++i){
            if(!visited.count(temp+i)){
                visited.insert(temp+i);
                password += i;
                if(DFS(visited, password, n, k, total)) return true;
                visited.erase(temp+i);
                password.erase(password.size()-1);
            }
        }
        return false;
    }
};
