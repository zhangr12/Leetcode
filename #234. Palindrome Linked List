/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
// reverse the second part of the string
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL) return true;
        // find middle point
        ListNode *fast = head, *slow = head;
        while(fast->next != NULL && fast->next->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        // reverse the second part
        ListNode *prev = NULL, *next = NULL;
        while(slow != NULL){
            next = slow->next;
            slow->next = prev;
            prev = slow;
            slow = next;
        }
        // check whether linked list from prev and linked list from head are same
        while(prev != NULL && head != NULL){
            if(prev->val != head->val) return false;
            prev = prev->next;
            head = head->next;
        }
        return true;
    }
};


//////////////////////////////////////
// straight forward solution
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL) return true;
        vector<int> temp;
        while(head){
            temp.push_back(head->val);
            head = head->next;
        }
        int i = 0, j = temp.size() - 1;
        while(i < j){
            if(temp[i] != temp[j]) return false;
            i++;
            j--;
        }
        return true;
    }
};
