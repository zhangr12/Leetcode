// STL: next_permutation
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        int n = factorial(nums.size());
        for(int i = 0; i <n; i++){
            res.push_back(nums);
            next_permutation(nums.begin(), nums.end());
        }
        return res;
    }
    
    int factorial(int n){
        int res = 1;
        for(int i = n; i >= 1; i--) res *= i;
        return res;
    }
};


//////////////////////////////////////
// recursive -- back trace
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        helper(nums, res, {});
        return res;
    }
    
    void helper(vector<int> nums, vector<vector<int>> &res, vector<int> temp){
        if(nums.size() == 0){
            res.push_back(temp);
            return;
        }
        
        for(int i = 0; i < nums.size(); i++){
            int crt = nums[i];
            temp.push_back(crt);
            nums.erase(nums.begin() + i);
            helper(nums, res, temp);
            temp.pop_back();
            nums.insert(nums.begin() + i, crt);
        }
    }
};



////////////////////////////////////
// BFS
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        queue<pair<vector<int>, vector<int>>> q;
        // initialize q
        for(int i = 0; i < nums.size(); i++){
            vector<int> temp_nums = nums;
            vector<int> temp_res;
            temp_res.push_back(temp_nums[i]);
            temp_nums.erase(temp_nums.begin() + i);
            q.push(make_pair(temp_res, temp_nums));
        }
        pair<vector<int>, vector<int>> temp;
        vector<int> temp_r, temp_n;
        while(!q.empty()){
            temp = q.front();
            q.pop();
            temp_r = temp.first;
            temp_n = temp.second;
            if(temp_n.size() == 0){
                res.push_back(temp_r);
                continue;
            }
            for(int i  = 0; i < temp_n.size(); i++){
                vector<int> temp1 = temp_n;
                vector<int> temp2 = temp_r;
                temp2.push_back(temp1[i]);
                temp1.erase(temp1.begin() + i);
                q.push(make_pair(temp2, temp1));
            }
        }
        return res;
    }
};
