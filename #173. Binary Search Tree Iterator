/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
public:
    BSTIterator(TreeNode* root) {
        // move to the left most child
        while(root){
            s.push(root);
            root = root->left;
        }
    }
    
    /** @return the next smallest number */
    int next() {
        TreeNode* res = s.top();
        s.pop();
        // explore left child of right child
        TreeNode* crt = res->right;
        // move to the left most child
        while(crt){
            s.push(crt);
            crt = crt->left;
        }
        return res->val;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        if(s.empty()) return false;
        return true;
    }
private:
    // always make sure s.top() is the current smallest node
    stack<TreeNode*> s;
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
