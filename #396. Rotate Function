class Solution {
public:
    int maxRotateFunction(vector<int>& A) {
        if(A.size() == 0) return 0;
        int n = A.size();
        // use maxIdx to record the element which has maximum coefficient in this round, which is also the one whose coefficient needs to be set to zero in next round
        int accuSum = accumulate(A.begin(), A.end(), 0), maxIdx = n-1;
        
        int crt = 0;
        for(int i = 0; i < n; i++) crt += i*A[i];
        int res = crt;
        // we need to run for another n-2 times
        for(int i = 1; i < n; i++){
            // everytime, we need to add every elements other than the maxIdx element by 1 time, and then minus (n-1)*A[maxIdx]
            // this is equivalent to increase every elements by 1 time and then minus n*A[maxIdx]
            // note that here the maxIdx is decreasing(write it down to figure it out!)
            // 0 1 2 3 maxIdx:3
            // 1 2 3 0 maxIdx:2
            // 2 3 0 1 maxIdx:1
            // 3 0 1 2 maxIdx:0
            crt = crt + accuSum - n*A[maxIdx];
            if(crt > res) res = crt;
            maxIdx--;
        }
        return res;
    }
};
