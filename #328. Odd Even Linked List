/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(!head) return head;
        ListNode *evenHead = new ListNode(0), *oddHead = new ListNode(0);
        ListNode *crtEven = evenHead, *crtOdd = oddHead;
        int count = 0;
        while(head){
            ++count;
            if(count%2){
                crtOdd->next = head;
                head = head->next;
                crtOdd = crtOdd->next;
                crtOdd->next = nullptr;
            }
            else{
                crtEven->next = head;
                head = head->next;
                crtEven = crtEven->next;
                crtEven->next = nullptr;
            }
        }
        crtOdd->next = evenHead->next;
        return oddHead->next;
    }
};






////////////////////////
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        ListNode *odd = new ListNode(0), *even = new ListNode(0), *crto, *crte;
        crto = odd;
        crte = even;
        int count = 1;
        while(head){
            if(count%2 == 0){
                crte->next = head;
                crte = crte->next;
            }
            else{
                crto->next = head;
                crto = crto->next;
            }
            count++;
            head = head->next;
        }
        // this line is important, consider the case
        // 1 -> 2 -> 3
        // without this line, the final result is:
        // even -> 2 -> 3
        // odd -> 1 -> 3 -> 2 // since we want to put even after odd
        // this will create an infinite loop
        crte->next = nullptr;
        crto->next = even->next;
        return odd->next;
    }
};
