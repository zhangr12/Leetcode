class Solution {
public:
    int numDecodings(string s) {
        // check if s.size() == 0 or s[0] == '0', if yes, return 0
        if(s.size() == 0 || s[0] == '0') return 0;
        
        // idea: dp with size s.size() + 1
        int n = s.size();
        vector<int> dp(n+1, 0);
        
        // initialization: dp[0] = 1, dp[1] = 1
        dp[0] = 1, dp[1] = 1;
        
        for(int i = 2; i < n + 1; i++){
            // transition formular: if(s[i] == '0') if (s[i-1] == '1' || s[i-1] == '2') dp[i] = dp[i-2] else return 0
            if(s[i-1] == '0'){
                if(s[i-2] == '1' || s[i-2] == '2'){
                    dp[i] = dp[i-2];
                }
                else{
                    return 0;
                }
            }
            else{
                // if(s[i] != 0) dp[i] += dp[i-1]  if(stoi(s.substr(i-1, 2)) <= 26) dp[i] += dp[i-2]
                dp[i] += dp[i-1];
                // first check previous char is not '0', then check if the combination is a valid one
                if(s[i-2] != '0' && stoi(s.substr(i-2, 2)) <= 26) dp[i] += dp[i-2];
            }
        }
        return dp[n];
    }
};
