class Solution {
public:
    // idea: sort envelopes first, let the width be in increasing order, for same width, the height is in decreasing order
    // then find the longest increasing subsequence for height
    int maxEnvelopes(vector<pair<int, int>>& envelopes) {
        if(envelopes.size() == 0) return 0;
        sort(envelopes.begin(), envelopes.end(), compare);
        return LIS(envelopes);
    }
    
    static bool compare(pair<int, int> &p1, pair<int, int> &p2){
        if(p1.first < p2.first) return true;
        if(p1.first > p2.first) return false;
        if(p1.second > p2.second) return true;
        return false;
    }
    
    int LIS(vector<pair<int, int>>& E){
        vector<int> res;
        for(auto e:E){
            auto it = lower_bound(res.begin(), res.end(), e.second);
            if(it == res.end()){
                res.push_back(e.second);
            }
            else{
                *it = e.second;
            }
        }
        return res.size();
    }
};
