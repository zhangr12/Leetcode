//a better solution based on the idea of two sum
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        // fix one, find two, skip duplicate
        int i = 0, n = nums.size();
        while(i < n){
            // note that here for left we start from i+1 to avoid duplicate result
            int l = i+1, r = n-1;
            while(l < r){
                int sum = nums[i] + nums[l] + nums[r];
                if(sum == 0){
                    res.push_back({nums[i], nums[l], nums[r]});
                    
                    // skip duplicate nums[l]
                    while(l < r && nums[l] == nums[l+1]) l++;
                    l++;
                    // skip duplicate nums[r]
                    while(l < r && nums[r] == nums[r-1]) r--;
                    r--;
                }
                else if(sum < 0){
                    l++;
                }
                else{
                    r--;
                }
            }
            // skip duplicate nums[i]
            while(i+1 < n && nums[i] == nums[i+1]) i++;
            i++;
        }
        return res;
    }
};



////////////////////////////
// original solution, a little bit tedious
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        // idea: two possible combinations: 1 positive 2 negative and 1 negative 2 positive
        sort(nums.begin(), nums.end());
        // this pointer mid separate negative and positive
        auto it = lower_bound(nums.begin(), nums.end(), 0);
        int mid = it - nums.begin();
        vector<vector<int>> res;
        if(mid + 2 < nums.size() && nums[mid] == 0 && nums[mid + 1] == 0 && nums[mid + 2] == 0) res.push_back({0,0,0});
        helper(nums, res, mid);
        return res;
    }
    
    void helper(vector<int> &nums, vector<vector<int>> &res, int mid){
        // 1P 2N
        // two pointers, one start from left, one start from right
        // remember to skip duplicate negative numbers(to avoid duplicate combinations)
        for(int i = mid; i < nums.size(); i++){
            // skip duplicate number
            if(i > mid && nums[i] == nums[i-1]) continue;
            int l = 0, r = mid-1;
            while(l < r){
                if(nums[l] + nums[r] + nums[i] == 0){
                    res.push_back({nums[l], nums[r], nums[i]});
                    l++;
                    r--;
                    // skip duplicate number
                    while(l < mid && nums[l] == nums[l-1]) l++;
                    while(r >= 0 && nums[r] == nums[r+1]) r--;
                }
                else if(nums[l] + nums[r] + nums[i] > 0){
                    r--;
                }
                else{
                    l++;
                }
            }
        }
        
        // 1N 2P
        // remember to skip duplicate negative numbers(to avoid duplicate combinations)
        for(int i = 0; i < mid; i++){
            // skip duplicate number
            if(i > 0 && nums[i] == nums[i-1]) continue;
            int l = mid, r = nums.size() - 1;
            while(l < r){
                //cout << l << " " << r << endl;
                if(nums[l] + nums[r] + nums[i] == 0){
                    res.push_back({nums[l], nums[r], nums[i]});
                    l++;
                    r--;
                    // skip duplicate number
                    while(l < nums.size() && nums[l] == nums[l-1]) l++;
                    while(r >= mid && nums[r] == nums[r+1]) r--;
                }
                else if(nums[l] + nums[r] + nums[i] > 0){
                    r--;
                }
                else{
                    l++;
                }
            }
        }
    }
};
