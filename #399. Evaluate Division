class Solution {
public:
    vector<double> calcEquation(vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries) {
        unordered_map<string, unordered_map<string, double>> m;
        // m[i][j] is the results for i/j
        for(int i = 0; i < equations.size(); i++){
            m[equations[i].first][equations[i].second] = values[i];
            m[equations[i].second][equations[i].first] = 1/values[i];
            m[equations[i].first][equations[i].first] = 1;
            m[equations[i].second][equations[i].second] = 1;
        }
        // find connections between all edges using Floyd-Warshall algorithm
        // k : string, unordered_map<string, double>
        for(auto k:m){
            // i: pair<string, double>
            for(auto i:k.second)
                // j: pair<string, double>
                for(auto j:k.second) m[i.first][j.first] = m[i.first][k.first]*m[k.first][j.first];
        }
        vector<double> res;
        for(auto q:queries){
            if(m.find(q.first) == m.end() || m[q.first].find(q.second) == m[q.first].end()) {
                res.push_back(-1);
                continue;
            }
            res.push_back(m[q.first][q.second]);
        }
        return res;
    }
};
