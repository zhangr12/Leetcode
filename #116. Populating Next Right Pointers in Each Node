/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    // recursive method
    void connect(TreeLinkNode *root) {
        if(!root) return;
        helper(root->left, root->right, nullptr);
        return;
    }
    
    
    void helper(TreeLinkNode* l, TreeLinkNode* r, TreeLinkNode* nxt_l){
        // since it is perfect binary tree, if left does not exist, then we reach the end
        if(!l) return;
        // let l point to r
        l->next = r;
        // let r point to nxt_l
        r->next = nxt_l;
        // call helper again to connect nodes on next level
        helper(l->left, l->right, r->left);
        // if nnxt_l exist, we connect rr with nxt_ll
        if(nxt_l){
            helper(r->left, r->right, nxt_l->left);
        }
        // else we connect rr with nullptr
        else{
            helper(r->left, r->right, nullptr);
        }
        return;
    }
};


//////////////////////////////
class Solution {
public:
    void connect(TreeLinkNode *root) {
        // level order traversal with using two vectors and two pointers
        // note that this is not a constant space solution
        if(!root) return;
        vector<TreeLinkNode*> v, *pv, nxt, *pnxt;
        v.push_back(root);
        pv = &v;
        pnxt = &nxt;
        while(pv->size()){
            if((*pv)[0] == nullptr) break;
            for(int i = 1; i < pv->size(); i++){
                (*pv)[i-1]->next = (*pv)[i];
                pnxt->push_back((*pv)[i-1]->left);
                pnxt->push_back((*pv)[i-1]->right);
            }
            pnxt->push_back((*pv)[pv->size() - 1]->left);
            pnxt->push_back((*pv)[pv->size() - 1]->right);
            swap(pv, pnxt);
            (*pnxt) = {};
        }
        return;
    }
};
