/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    // idea: two pointers for current intervals in A and B
    // if current interval in A's right side is less than B's left side, increase A
    // if they have intersection, record the intersection and increase the pointer of the one has smaller right side
    // stop when one of the pointer reaches the end of list
    vector<Interval> intervalIntersection(vector<Interval>& A, vector<Interval>& B) {
        int i = 0, j = 0;
        vector<Interval> res;
        while(i < A.size() && j < B.size()){
            if(max(A[i].start, B[j].start) <= min(A[i].end, B[j].end)){
                res.push_back({max(A[i].start, B[j].start), min(A[i].end, B[j].end)});
            }
            if(A[i].end < B[j].end){
                i++;
            }
            else{
                j++;
            }
        }
        return res;
    }
};
