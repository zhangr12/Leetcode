// monotone stack
// idea: we use a stack to store the price and the results(sonsecutive days that the price is <= today's price)
// when come a new price, we compare it with the price on the top of the stack
// if the price is less than or equal to today's price, we accumulate the count
// keep doing that until the stack is empty or the price is greater than current price
// push {price, accumulate result} pair into the stack
// return result
class StockSpanner {
public:
    StockSpanner() {
        
    }
    
    int next(int price) {
        int res = 1;
        while(!s.empty() && s.top().first <= price){
            res += s.top().second;
            s.pop();
        }
        s.push({price, res});
        return res;
    }
private:
    stack<pair<int, int>> s;
};

/**
 * Your StockSpanner object will be instantiated and called as such:
 * StockSpanner obj = new StockSpanner();
 * int param_1 = obj.next(price);
 */
