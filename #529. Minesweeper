class Solution {
public:
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        // if click on the mine, change the mine to 'X' and return the board
        if(board[click[0]][click[1]] == 'M') {
            board[click[0]][click[1]] = 'X';
            return board;
        }
        // If an empty square ('E') with at least one adjacent mine is revealed
        // change it to a digit ('1' to '8') representing the number of adjacent mines.
        int count = count_mine(board, click[0], click[1]);
        if(board[click[0]][click[1]] == 'E' && count > 0){
            board[click[0]][click[1]] = '0' + count;
            return board;
        }
        // Otherwise, use BFS
        // use 'L' to determine the place is on the list already
        // after visited, change it either to a number or to 'B'
        // use queue to perform BFS
        queue<pair<int, int>> q;
        q.push({click[0], click[1]});
        pair<int, int> temp;
        int i, j, m = board.size(), n = board[0].size();
        while(!q.empty()){
            temp = q.front();
            i = temp.first;
            j = temp.second;
            q.pop();
            // check blocks around current place and expend the queue
            if(i-1 >= 0 && board[i-1][j] == 'E'){
                count = count_mine(board, i-1, j);
                if(count > 0){
                    board[i-1][j] = '0' + count;
                }
                else{
                    q.push({i-1, j});
                    board[i-1][j] = 'L';
                }
            }
            if(i-1 >= 0 && j-1 >= 0 && board[i-1][j-1] == 'E'){
                count = count_mine(board, i-1, j-1);
                if(count > 0){
                    board[i-1][j-1] = '0' + count;
                }
                else{
                    q.push({i-1, j-1});
                    board[i-1][j-1] = 'L';
                }
            }
            if(i-1 >= 0 && j+1 < n && board[i-1][j+1] == 'E'){
                count = count_mine(board, i-1, j+1);
                if(count > 0){
                    board[i-1][j+1] = '0' + count;
                }
                else{
                    q.push({i-1, j+1});
                    board[i-1][j+1] = 'L';
                }
            }
            if(j+1 < n && board[i][j+1] == 'E'){
                count = count_mine(board, i, j+1);
                if(count > 0){
                    board[i][j+1] = '0' + count;
                }
                else{
                    q.push({i, j+1});
                    board[i][j+1] = 'L';
                }
            }
            if(j-1 >= 0 && board[i][j-1] == 'E'){
                count = count_mine(board, i, j-1);
                if(count > 0){
                    board[i][j-1] = '0' + count;
                }
                else{
                    q.push({i, j-1});
                    board[i][j-1] = 'L';
                }
            }
            if(i+1 < m && j+1 < n && board[i+1][j+1] == 'E'){
                count = count_mine(board, i+1, j+1);
                if(count > 0){
                    board[i+1][j+1] = '0' + count;
                }
                else{
                    q.push({i+1, j+1});
                    board[i+1][j+1] = 'L';
                }
            }
            if(i+1 < m && board[i+1][j] == 'E'){
                count = count_mine(board, i+1, j);
                if(count > 0){
                    board[i+1][j] = '0' + count;
                }
                else{
                    q.push({i+1, j});
                    board[i+1][j] = 'L';
                }
            }
            if(i+1 < m && j-1 >= 0 && board[i+1][j-1] == 'E'){
                count = count_mine(board, i+1, j-1);
                if(count > 0){
                    board[i+1][j-1] = '0' + count;
                }
                else{
                    q.push({i+1, j-1});
                    board[i+1][j-1] = 'L';
                }
            }
            board[i][j] = 'B';
        }
        return board;
    }
    
    // count mine around the place
    int count_mine(vector<vector<char>>& board, int i, int j){
        int res = 0, m = board.size(), n = board[0].size();
        if(i-1 >= 0 && board[i-1][j] == 'M') res++;
        if(i-1 >= 0 && j - 1 >= 0 && board[i-1][j-1] == 'M') res++;
        if(i-1 >= 0 && j + 1 < n && board[i-1][j+1] == 'M') res++;
        if(j + 1 < n && board[i][j+1] == 'M') res++;
        if(j - 1 >= 0 && board[i][j-1] == 'M') res++;
        if(i+1 < m && j + 1 < n && board[i+1][j+1] == 'M') res++;
        if(i+1 < m && board[i+1][j] == 'M') res++;
        if(i+1 < m && j - 1 >= 0 && board[i+1][j-1] == 'M') res++;
        return res;
    }
};
