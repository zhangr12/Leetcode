///////////////////////////
// neat version
// basic idea: find all the gaps between bricks and store them in a map
// map<location of gap, number of gaps>
// then the answer will be the number of rows minus the largest number of gaps in the map
class Solution {
public:
    int leastBricks(vector<vector<int>>& wall) {
        unordered_map<int, int> m;
        int sum = 0, max_gap = 0;
        for(int i = 0; i < wall.size(); i++){
            sum = 0;
            for(int j = 0; j < wall[i].size()-1; j++){
                m[sum += wall[i][j]]++;
                if(m[sum] > max_gap) max_gap = m[sum];
            }
        }
        return wall.size() - max_gap;
    }
};


///////////////////////////////////
class Solution {
public:
    int leastBricks(vector<vector<int>>& wall) {
        // n is the number of rows, m is the number of columns
        // temp_min record the number of cut at crt position
        // crt start from 1 to m-1
        int n = wall.size(), m = 0, res = INT_MAX, temp_min, crt = 1, row_num = 0;
        // check if wach row only has one brick
        for(int i = 0; i < n; i++) row_num = max(row_num, (int)wall[i].size());
        if(row_num == 1) return n;
        
        for(int i = 0; i < n; i++){
            for(int j = 1; j < wall[i].size(); j++) wall[i][j] += wall[i][j-1];
        }
        unordered_map<int, int> mm;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < wall[i].size() - 1; j++){
                mm[wall[i][j]]++;
            }
        }
        int max_gaps = -1;
        for(auto item:mm){
            if(max_gaps < item.second) max_gaps = item.second;
        }
        return n-max_gaps;
    }
};


////////////////////////////////
class Solution {
public:
    int leastBricks(vector<vector<int>>& wall) {
        // n is the number of rows, m is the number of columns
        // temp_min record the number of cut at crt position
        // crt start from 1 to m-1
        int n = wall.size(), res = INT_MAX, temp_min, crt = 1, row_num = 0;
        unordered_map<int, int> m;
        // check if wach row only has one brick
        for(int i = 0; i < n; i++){
            row_num = max(row_num, (int)wall[i].size());
            m[wall[i][0]]++;
        }
        if(row_num == 1) return n;
        for(int i = 0; i < n; i++){
            for(int j = 1; j < wall[i].size()-1; j++){
                wall[i][j] += wall[i][j-1];
                m[wall[i][j]]++;
            }
        }
        int max_gaps = -1;
        for(auto item:m){
            if(max_gaps < item.second) max_gaps = item.second;
        }
        return n-max_gaps;
    }
};
