/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int longestUnivaluePath(TreeNode* root) {
        int lup = 0;
        if (root) dfs(root, lup);
        return lup;
    }
    
    // dfs function does not consider that "v" shape situation, it returns max(left path which has same value, right path which has same value)
    int dfs(TreeNode* node, int& lup){
        // find longest path which use node->left as root, if node->left exists
        int l = node->left ? dfs(node->left, lup) : 0;
        // find longest path which use node->right as root, if node->right exists
        int r = node->right ? dfs(node->right, lup) : 0;
        // if node->left->val equal to current node->val, l+1, else, resl = 0
        int resl = node->left && node->left->val == node->val ? l+1 : 0;
        // if node->right->val equal to current node->val, r+1, else, resr = 0
        int resr = node->right && node->right->val == node->val ? r+1 : 0;
        // lup equal to resl + resr
        lup = max(lup, resl + resr);
        // return maximun path value
        return max(resl, resr);
    }
};
