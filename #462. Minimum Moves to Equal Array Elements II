// use median as pivot
class Solution {
public:
    int minMoves2(vector<int>& nums) {
        // choose median as pivot
        sort(nums.begin(), nums.end());
        int res = 0, n = nums.size();
        for(int i = 0; i < n/2; i++) res += nums[n-i-1] - nums[i];
        return res;
    }
};



// brutal force
class Solution {
public:
    int minMoves2(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        long int pivot = 0, step, n = nums.size(), min_step = INT_MAX;
        while(pivot < n){
            step = 0;
            for(int i = 0; i < pivot; i++){
                step += nums[pivot] - nums[i];
            }
            for(int i = pivot+1; i < n; i++){
                step += nums[i] - nums[pivot];
            }
            if(step < min_step) min_step = step;
            pivot++;
        }
        return min_step;
    }
};
