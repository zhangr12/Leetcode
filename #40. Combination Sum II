class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> res;
        helper(candidates, res, {}, 0, target);
        return res;
    }
    
    void helper(vector<int> &c, vector<vector<int>> &res, vector<int> temp, int start, int remainder){
        if(remainder < 0) return;
        if(remainder == 0){
            res.push_back(temp);
            return;
        }
        
        // the tricky part is that we need to skip same number in this for loop(except the first number)
        // consider this example, 2 2 2 2
        // we only need to consider the sequence start with the first 2, since it contains the case 2 2 2, 2 2 and 2
        // this is why we need to skip the duplicate numbers except for the first one
        for(int i = start; i < c.size(); i++){
            if(i > start && c[i-1] == c[i]) continue;
            temp.push_back(c[i]);
            helper(c, res, temp, i+1, remainder - c[i]);
            temp.pop_back();
        }
    }
};
