/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        if(!head) return;
        ListNode *slow = head, *fast = head->next;
        while(fast != nullptr && fast->next != nullptr){
            slow = slow->next;
            fast = fast->next->next;
        }
        fast = slow->next;
        slow->next = nullptr;
        slow = reverse(fast);
        // merge
        int count = 1;
        ListNode *nxt = head->next;
        while(nxt && slow){
            if(count%2){
                head->next = slow;
                slow = slow->next;
            }
            else{
                head->next = nxt;
                nxt = nxt->next;
            }
            head = head->next;
            count++;
        }
        if(nxt) head->next = nxt;
        if(slow) head->next = slow;
    }
    
    ListNode* reverse(ListNode* head){
        ListNode *prev = nullptr, *crt = head, *temp;
        while(crt != nullptr){
            temp = crt->next;
            crt->next = prev;
            prev = crt;
            crt = temp;
        }
        return prev;
    }
};
