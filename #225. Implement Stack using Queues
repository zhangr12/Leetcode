/////////////////////////////////
// after push a new element into queue, use push(front) and pop to reverse the order of the element in the queue
class MyStack {
public:
    queue<int> s;
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        s.push(x);
        for(int i = 0; i < s.size() - 1; i++){
            s.push(s.front());
            s.pop();
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int temp = s.front();
        s.pop();
        return temp;
    }
    
    /** Get the top element. */
    int top() {
        return s.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return s.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */


/////////////////////////////////
class MyStack {
public:
    queue<int> q1, q2;
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        if(q2.empty()){
            q1.push(x);
        }
        else{
            q2.push(x);
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        if(q2.empty()){
            int prev;
            while(!q1.empty()){
                prev = q1.front();
                q1.pop();
                if(q1.empty()){
                    return prev;
                }
                else{
                    q2.push(prev);
                }
            }
        }
        else{
            int prev;
            while(!q2.empty()){
                prev = q2.front();
                q2.pop();
                if(q2.empty()){
                    return prev;
                }
                else{
                    q1.push(prev);
                }
            }
        }
    }
    
    /** Get the top element. */
    int top() {
        if(q2.empty()){
            int prev;
            while(!q1.empty()){
                q2.push(q1.front());
                prev = q1.front();
                q1.pop();
            }
            return prev;
        }
        else{
            int prev;
            while(!q2.empty()){
                q1.push(q2.front());
                prev = q2.front();
                q2.pop();
            }
            return prev;
        }
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        if(q1.empty() && q2.empty()) return true;
        return false;
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
