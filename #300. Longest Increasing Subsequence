class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        // use res to store the longest increasing subsequence
        vector<int> res;
        for(int num:nums){
            // find current number's location in res
            auto it = lower_bound(res.begin(), res.end(), num);
            // if current number is bigger than all the numbers in res, we simply push it into res
            if(it == res.end()) res.push_back(num);
            // if current number is smaller than or equal to some element nums[k] in res, replace nums[k] with current number
            // by doing this we can guarantee we always have the highest probability to include next on coming number in the res
            else *it = num;
        }
        //for(int num:res) cout << num <<endl;
        // it is worth to note that the numbers in res does note guarantee to be a valid LIS, but its length is the same with the valid LIS
        // consider the example, 0, 8, 4, 12, 2
        // the res is 0, 2, 12, which is not valid(since 2 comes after 12), however, its length is the same with LIS which is 0 4 12
        return res.size();
    }
};


/////////////////////////////////
// O(N^2) DP solution
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size(), res = 0;
        if(n == 0) return 0;
        // dp with size n
        // dp[i] means the length of LIS with ending nums[i]
        // initialization: dp[i] = 1 means the LIS at least contail nums[i] itself
        vector<int> dp(n, 1);
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                // transition formular: if we want use nums[i] as the ending of a LIS, we need to find the previous LIS with ending less than nums[i]
                if(nums[j] <nums[i]) dp[i] = max(dp[i], 1 + dp[j]);
            }
            // update res, since the truely LIS may ending with any element in the nums
            res = max(res, dp[i]);
        }
        return res;
    }
};
