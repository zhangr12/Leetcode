class Solution {
public:
    // observation:
    // a local inversion must be a global inversion
    // a global inversion may not be a local inversion
    // so it is only true when every global inversion is a local inversion
    // this means the offset can not be greater than 1
    bool isIdealPermutation(vector<int>& A) {
        for(int i = 0; i < A.size(); i++){
            if(abs(A[i] - i) > 1) return false;
        }
        return true;
    }
};

/////////////////////////////////////
class Solution {
public:
    // direct method: time O(NlogN), space O(N)
    bool isIdealPermutation(vector<int>& A) {
        vector<int> prev{A[0]};
        
        int local = 0, global = 0;
        
        for(int i = 1; i < A.size(); i++){
            // local inverse
            if(A[i-1] > A[i]) local++;
            
            auto it = upper_bound(prev.begin(), prev.end(), A[i]);
            // it should point at the end of prev
            // if its not point at the end of prev, the distance is prev.end() - it
            global += prev.end() -it;
            
            prev.insert(it, A[i]);
        }
        return local == global;
    }
};
