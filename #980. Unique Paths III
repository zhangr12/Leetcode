class Solution {
public:
    // brutal force
    int uniquePathsIII(vector<vector<int>>& grid) {
        int num = 0, m = grid.size(), n = grid[0].size(), x, y;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] != -1) num++;
                if(grid[i][j] == 1){
                    x = i;
                    y = j;
                }
            }
        }
        int res = 0;
        grid[x][y] = 3;
        helper(grid, res, 1, num, x, y);
        return res;
    }
    
    void helper(vector<vector<int>> &grid, int &res, int count, int num, int x, int y){
        int m = grid.size(), n = grid[0].size();
        if(x-1 >= 0 && !(grid[x-1][y] == -1 || grid[x-1][y] == 3)){
            if(grid[x-1][y] == 2){
                if(count == num-1) res++;
            }
            else{
                grid[x-1][y] = 3;
                helper(grid, res, count+1, num, x-1, y);
                grid[x-1][y] = 0;
            }
        }
        
        if(y-1 >= 0 && !(grid[x][y-1] == -1 || grid[x][y-1] == 3)){
            if(grid[x][y-1] == 2){
                if(count == num-1) res++;
            }
            else{
                grid[x][y-1] = 3;
                helper(grid, res, count+1, num, x, y-1);
                grid[x][y-1] = 0;
            }
        }
        
        if(x+1 < m && !(grid[x+1][y] == -1 || grid[x+1][y] == 3)){
            if(grid[x+1][y] == 2){
                if(count == num-1) res++;
            }
            else{
                grid[x+1][y] = 3;
                helper(grid, res, count+1, num, x+1, y);
                grid[x+1][y] = 0;
            }
        }
        
        if(y+1 < n && !(grid[x][y+1] == -1 || grid[x][y+1] == 3)){
            if(grid[x][y+1] == 2){
                if(count == num-1) res++;
            }
            else{
                grid[x][y+1] = 3;
                helper(grid, res, count+1, num, x, y+1);
                grid[x][y+1] = 0;
            }
        }
    }
};
