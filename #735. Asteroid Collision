class Solution {
public:
    vector<int> asteroidCollision(vector<int>& asteroids) {
        stack<int> s;
        for(int star:asteroids){
            if(s.empty()){
                s.push(star);
            }
            else{
                // <-- -   + -->
                // - -
                // + +
                if((s.top() > 0 && star > 0) || (s.top() < 0 && star < 0) || (s.top() < 0 && star > 0)){
                    s.push(star);
                }
                // + -->   <-- -
                else{
                    while(!s.empty() && s.top() > 0 && abs(star) > s.top()){
                        s.pop();
                    }
                    if(s.empty() || s.top() < 0){
                        s.push(star);
                    }
                    else if(abs(star) == s.top()){
                        s.pop();
                    }
                }
            }
        }
        vector<int> res;
        while(!s.empty()){
            res.insert(res.begin(), s.top());
            s.pop();
        }
        return res;
    }
};


////////////////////////////////
// use vector to mimic stack
class Solution {
public:
    vector<int> asteroidCollision(vector<int>& A) {
        vector<int> res;
		for(int star:A){
			if(res.size() == 0){
				res.push_back(star);
			}
			else{
				// no collision
				if((res.back() > 0 && star > 0) || (res.back() < 0 && star < 0) || (res.back() < 0 && star > 0)){
					res.push_back(star);
				}
				else{
					while(res.size() > 0 && res.back() > 0 && -star > res.back()) res.pop_back();
					if(res.size() == 0 || res.back() < 0){
						res.push_back(star);
					}
					else if(res.back() == -star){
						res.pop_back();
					}
				}
			}
		}
		return res;
    }
};
