// priority_queue method
class Comp{
public:
    bool operator()(pair<int, vector<int>> &p1, pair<int, vector<int>> &p2){
        return p1.first < p2.first;
    }
};

class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        priority_queue<pair<int, vector<int>>, vector<pair<int, vector<int>>>, Comp> q;
        for(auto p:points){
            q.push({p[0]*p[0]+p[1]*p[1], p});
            if(q.size() > K) q.pop();
        }
        vector<vector<int>> res(K);
        for(int i = 0; i < K; ++i){
            res[i] = q.top().second;
            q.pop();
        }
        return res;
    }
};


// use std::partial_sort
class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        auto comp = [](const vector<int> &p1, const vector<int> &p2){ return p1[0]*p1[0]+p1[1]*p1[1] < p2[0]*p2[0]+p2[1]*p2[1]; };
        partial_sort(points.begin(), points.begin()+K, points.end(), comp);
        return vector<vector<int>>(points.begin(), points.begin()+K);
    }
};
