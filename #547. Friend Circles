class Solution {
public:
    // union find
    int findCircleNum(vector<vector<int>>& M) {
        int n = M.size();
        
        vector<int> parent(n, 0);
        iota(parent.begin(), parent.end(), 0);
        int res = n;
        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                if(M[i][j] == 1) unionFind(parent, i, j, res);
            }
        }
        return res;
    }
    
    void unionFind(vector<int> &parent, int f1, int f2, int &res){
        int p1 = findParent(parent, f1), p2 = findParent(parent, f2);
        if(p1 != p2){
            parent[p1] = p2;
            res--;
        }
    }
    
    int findParent(vector<int> &parent, int p){
        // path compression
        if(parent[p] != p) parent[p] = findParent(parent, parent[p]);
        return parent[p];
    }
};


// bad coding, to much redundant part
class Solution {
public:
    int findCircleNum(vector<vector<int>>& M) {
        // use s to remember which row has been discovered
        // 1 means on list, 2 means visited
        unordered_map<int, int> m;
        int res = 0;
        for(int i = 0; i < M.size(); i++){
            if(m.find(i) != m.end()) continue;
            // if not visited, this means we found a new group
            res++;
            // use queue to do search
            queue<int> q;
            for(int j = 0; j < M[0].size(); j++){
                if(i != j && M[i][j] != 0 && m[j] == 0){
                    q.push(j);
                    m[j] = 1;
                }
            }
            while(!q.empty()){
                int crt = q.front();
                q.pop();
                for(int j = 0; j < M[0].size(); j++){
                    if(crt != j && M[crt][j] != 0 && m[j] == 0){
                        q.push(j);
                        m[j] = 1;
                    }
                }
                m[crt] = 2;
            }
        }
        return res;
    }
};


////////////////////////////////////
// instead of using unordered_map, we can use set to do the same thing
class Solution {
public:
    int findCircleNum(vector<vector<int>>& M) {
        unordered_set<int> s;
        int res = 0, n = M.size();
        for(int i = 0; i < n; i++){
            if(s.find(i) != s.end()) continue;
            res++;
            queue<int> q;
            q.push(i);
            s.insert(i);
            while(!q.empty()){
                int temp = q.front();
                q.pop();
                for(int j = 0; j < n; j++){
                    if(M[temp][j] != 0 && s.find(j) == s.end()){
                        q.push(j);
                        s.insert(j);
                    }
                }
            }
        }
        return res;
    }
};
