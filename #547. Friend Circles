class Solution {
public:
    int findCircleNum(vector<vector<int>>& M) {
        // use s to remember which row has been discovered
        // 1 means on list, 2 means visited
        unordered_map<int, int> m;
        int res = 0;
        for(int i = 0; i < M.size(); i++){
            if(m.find(i) != m.end()) continue;
            // if not visited, this means we found a new group
            res++;
            // use queue to do search
            queue<int> q;
            for(int j = 0; j < M[0].size(); j++){
                if(i != j && M[i][j] != 0 && m[j] == 0){
                    q.push(j);
                    m[j] = 1;
                }
            }
            while(!q.empty()){
                int crt = q.front();
                q.pop();
                for(int j = 0; j < M[0].size(); j++){
                    if(crt != j && M[crt][j] != 0 && m[j] == 0){
                        q.push(j);
                        m[j] = 1;
                    }
                }
                m[crt] = 2;
            }
        }
        return res;
    }
};
