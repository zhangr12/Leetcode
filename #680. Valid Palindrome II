class Solution {
public:
    bool validPalindrome(string s) {
        int del_num = 0, i = 0, j = s.size() - 1;
        while(i < j){
            if (s[i] == s[j]){
                i++;
                j--;
            }
            else{
                // check whether we should move left or right pointer
                // we cannot only check i+1, j and i, j-1. We should also check the next one, which is i+2, j-1 and i+1, j-2.
                // when we check i+2, j-1 and i+1, j-2, we need to make sure the index does not meet with each other
                // if two i and j are close enough, when we do not need to check the second pair
                // i and j are one step away: j-i = 1, two step away: j-i=1+2=3
                if (s[i+1] == s[j] && (i+2 >= j-1 || s[i+2] == s[j-1])){
                    i += 2;
                    j--;
                    del_num++;
                }
                else if (s[i] == s[j-1] && (i+1 >= j-2 || s[i+1] == s[j-2])){
                    i++;
                    j -= 2;
                    del_num++;
                }
                else{
                    return false;
                }
            }
            if(del_num == 2) return false;
        }
        return true;
    }
};
