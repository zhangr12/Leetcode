// static DP method. Much faster than traditional dp since we store the reuse dp vector from previous test cases
// since in the test case we will call this function for multiple times, so it is better to make dp a static type
// if we make dp a static type, the space for dp will get allocated for the lifetime of the program, which means we can avoid a lot of recalculation
class Solution {
public:
    int numSquares(int n) {
        if(n < 0) return -1;
        // dp[i] means minimum number of perfect numbers that are needed to make number i
        static vector<int> dp{0};
        // if dp.size() > n, then we already have the answer
        // otherwise, we keep spanning dp until its length is n+1
        while(dp.size() <= n){
            // next number we can to calculate is dp.size() since dp starts from 0
            int crt_num = dp.size(), i = 1, temp = INT_MAX;
            // for each number i, possible combinations are: dp[i-j*j] + 1 for j*j <= i
            while(i*i <= crt_num){
                temp = min(temp, 1 + dp[crt_num - i*i]);
                i++;
            }
            dp.push_back(temp);
        }
        
        return dp[n];
    }
};


///////////////////////////////////
// dp method with complexity O(N^2)
class Solution {
public:
    int numSquares(int n) {
        int sqrt_n = sqrt(n);
        if(sqrt_n*sqrt_n == n) return 1;
        // similar with coin change problem(322)
        // dp with size n + 1
        // dp[i] means the fewest combination of perfect squre number we need to reach number i
        // initialization: dp[1] = 1
        // transition formular: dp[i] = min(dp[j] + dp[i-j]) for j from 1 to i/2
        vector<int> dp(n+1, INT_MAX);
        dp[0] = 1;
        // fill in perfect square number
        for(int i = 1; i <= sqrt_n; i++) dp[i*i] = 1;
        for(int i = 2; i < n+1; i++){
            if(dp[i] == 1) continue;
            // check all the possible combinations of number i
            // note that the number i can be divided into two parts, j*j and i-j*j
            // dp[j*j] = 1
            int j = 1;
            while(j*j < i){
                dp[i] = min(dp[i], 1 + dp[i-j*j]);
                j++;
            }
        }
        return dp[n];
    }
};
