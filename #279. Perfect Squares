// dp method with complexity O(N^2)
class Solution {
public:
    int numSquares(int n) {
        int sqrt_n = sqrt(n);
        if(sqrt_n*sqrt_n == n) return 1;
        // similar with coin change problem(322)
        // dp with size n + 1
        // dp[i] means the fewest combination of perfect squre number we need to reach number i
        // initialization: dp[1] = 1
        // transition formular: dp[i] = min(dp[j] + dp[i-j]) for j from 1 to i/2
        vector<int> dp(n+1, INT_MAX);
        dp[0] = 1;
        // fill in perfect square number
        for(int i = 1; i <= sqrt_n; i++) dp[i*i] = 1;
        for(int i = 2; i < n+1; i++){
            if(dp[i] == 1) continue;
            // check all the possible combinations of number i
            // note that the number i can be divided into two parts, j*j and i-j*j
            // dp[j*j] = 1
            int j = 1;
            while(j*j < i){
                dp[i] = min(dp[i], 1 + dp[i-j*j]);
                j++;
            }
        }
        return dp[n];
    }
};
