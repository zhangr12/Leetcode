class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> m1;
        for(int num:nums) m1[num]++;
        map<int, vector<int>> m2;
        for(auto it = m1.begin(); it != m1.end(); it++){
            if(m2.find(it->second) == m2.end()){
                vector<int> temp;
                temp.push_back(it->first);
                m2[it->second] = temp;
            }
            else{
                m2[it->second].push_back(it->first);
            }
        }
        vector<int> res;
        for(auto it = m2.rbegin(); it != m2.rend(); it++){
            if(k > 0){
                for(int i = 0; i < it->second.size(); i++){
                    k--;
                    res.push_back(it->second[i]);
                }
            }
        }
        return res;
    }
};



// bucket sort, slower than the first method, but this is guaranteed to be O(N) time complexity
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> m;
        for(int num:nums) m[num]++;
        vector<vector<int>> bucket(nums.size() + 1);
        for(auto item:m){
            bucket[item.second].push_back(item.first);
        }
        vector<int> res;
        for(int i = bucket.size()-1; i >= 0; i--){
            for(int j = 0; j < bucket[i].size(); j++){
                res.push_back(bucket[i][j]);
                if(res.size() == k) return res;
            }
        }
    }
};
