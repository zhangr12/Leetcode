class Solution {
public:
    int longestPalindromeSubseq(string s) {
        // dynamic programming
        // dp is n by n, where n is the size of s
        // dp[i][j] means the longest palindrome subsequence of subsequence start at i, end at j
        // initialize: dp[i][i] = 1
        // transition formular: if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2
        // if s[i] != s[j] dp[i][j] = max(dp[i+1][j], dp[i][j-1])
        int n = s.size();
        vector<vector<int>> dp(n ,vector<int>(n, 0));
        // the process of dynamic programming is determined by the transition formular
        for(int i = n - 1; i >= 0; i--){
            dp[i][i] = 1;
            for(int j = i + 1; j < n; j++){
                if(s[i] == s[j]){
                    dp[i][j] = dp[i+1][j-1] + 2;
                }
                else{
                    dp[i][j] = max(dp[i+1][j], dp[i][j-1]);
                }
            }
        }
        return dp[0][n-1];
    }
};
