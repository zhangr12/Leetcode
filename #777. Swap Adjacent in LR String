class Solution {
public:
    // idea:
    // L and R's relative order have to be same
    // L's position in start has to be greater than or equal to L's potion in end
    // R's position in start has to be smaller than or equal to R's potion in end
    bool canTransform(string start, string end) {
        if(start.size() != end.size()) return false;
        int n = start.size();
        vector<pair<char, int>> v1, v2;
        for(int i = 0; i < n; i++){
            if(start[i] != 'X') v1.push_back({start[i], i});
            if(end[i] != 'X') v2.push_back({end[i], i});
        }
        if(v1.size() != v2.size()) return false;
        for(int i = 0; i < v1.size(); i++){
            // check if relative position is the same
            if(v1[i].first != v2[i].first) return false;
            // if it is 'L', then L's position in start has to be greater than or equal to L's potion in end in order to transform to end
            if(v1[i].first == 'L' && v1[i].second < v2[i].second) return false;
            // if it is 'R', then R's position in start has to be smaller than or equal to R's potion in end in order to transform to end
            if(v1[i].first == 'R' && v1[i].second > v2[i].second) return false;
        }
        return true;
    }
};
