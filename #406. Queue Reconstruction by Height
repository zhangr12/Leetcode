//Pick out tallest group of people and sort them in a subarray (S). Since there's no other groups of people taller than them, 
//therefore each guy's index will be just as same as his k value.
//For 2nd tallest group (and the rest), insert each one of them into (S) by k value. So on and so forth.
//E.g.
//input: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
//subarray after step 1: [[7,0], [7,1]]
//subarray after step 2: [[7,0], [6,1], [7,1]]
class Solution {
public:
    vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
        map<int, vector<int>> m;
        for(int i = 0; i < people.size(); i++){
            if(m.find(people[i].first) == m.end()){
                vector<int> temp;
                temp.push_back(people[i].second);
                m[people[i].first] = temp;
            }
            else{
                m[people[i].first].push_back(people[i].second);
            }
        }
        vector<int> temp2;
        vector<pair<int, int>> res;
        for(auto it = m.rbegin(); it != m.rend(); it++){
            temp2 = it->second;
            sort(temp2.begin(), temp2.end());
            for(int i = 0; i < temp2.size(); i++){
                res.insert(res.begin() + temp2[i], make_pair(it->first, temp2[i]));
            }
        }
        return res;
    }
};
