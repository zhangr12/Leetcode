//Alex is first to pick pile.
//piles.length is even, and this lead to an interesting fact:
//Alex can always pick odd piles or always pick even piles!

//For example,
//If Alex wants to pick even indexed piles piles[0], piles[2], ....., piles[n-2],
//he picks first piles[0], then Lee can pick either piles[1] or piles[n - 1].
//Every turn, Alex can always pick even indexed piles and Lee can only pick odd indexed piles.

//In the description, we know that sum(piles) is odd.
//If sum(piles[even]) > sum(piles[odd]), Alex just picks all evens and wins.
//If sum(piles[even]) < sum(piles[odd]), Alex just picks all odds and wins.
class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        return true;
    }
};



////////////////////////////////////////////////
//It's tricky when we have even number of piles of stones. You may not have this condition in an interview.

//Follow-up:

//What if piles.length can be odd?
//What if we want to know exactly the diffenerce of score?
//Then we need to solve it with DP.

//dp[i][j] means the biggest number of stones you can get more than opponent picking piles in piles[i] ~ piles[j].
//You can first pick piles[i] or piles[j].

//If you pick piles[i], your result will be piles[i] - dp[i + 1][j]
//If you pick piles[j], your result will be piles[j] - dp[i][j - 1]
//So we get:
//dp[i][j] = max(piles[i] - dp[i + 1][j], piles[j] - dp[i][j - 1])
//We start from smaller subarray and then we use that to calculate bigger subarray.
class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        int n = piles.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int i = 0; i < n; i++) dp[i][i] = piles[i];
        for(int j = 1; j < n; j++){
            for(int i = 0; i < n-j; i++){
                dp[i][i+j] = max(piles[i] - dp[i+1][i+j], piles[j] - dp[i][i+j-1]);
            }
        }
        return dp[n-1][n-1] > 0;
    }
};
