class Solution {
public:
    // idea: greedy
    // sort accodring to begin time
    // given previous end point, we try to find the farest current end point
    // keep checking whether we included T already
    // only add new interval when previous end point has no intersection with current interval
    // exmaple: [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]]
    // sort first: [0,2], [1,9], [1,5], [4,6], [5,9], [8,10]
    // start from [0,2], we try to move as far as we can as long as interval's left side is <= 2
    // the farest we can reach is 9
    // when we reach [4,6], 2 cannot connect with 4, we need to add new interval
    // since 9 can cover 4, we continue to see what is the farest end point we can reach given start point is <= 9
    // this gives us [8,10] which has right side >= 10, return the number of intervals we used
    int videoStitching(vector<vector<int>>& clips, int T) {
        if(clips.size() == 0) return -1;
        auto lambda = [](const vector<int> &v1, const vector<int> &v2){ return v1[0] < v2[0]; };
        sort(clips.begin(), clips.end(), lambda);
        if(clips[0][0] > 0) return -1;
        int prevEnd = 0, crtEnd = clips[0][1], res = 1;
        for(auto& c:clips){
            if(c[0] <= prevEnd){
                if(crtEnd < c[1]) crtEnd = c[1];
            }
            else{
                if(crtEnd < c[0]) return -1;
                prevEnd = crtEnd;
                if(crtEnd < c[1]) crtEnd = c[1];
                ++res;
            }
            if(crtEnd >= T) return res;
        }
        return -1;
    }
};
