// binary search
class Solution {
public:
    int arrangeCoins(int n) {
        //(k+1)*k/2 = n
        //k^2+k = 2*n
        //k^2+k-2n = 0
        long long int low = 1, high = n, mid;
        while(low <= high){
            mid = low + (high-low)/2;
            if((mid+1)*mid/2 > n){
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return low - 1;
    }
};


////////////////////////////////
// classic (-b + sqrt(b^2-4ac))/(2a) method
class Solution {
public:
    int arrangeCoins(int n) {
        //(k+1)*k/2 = n
        //k^2+k = 2*n
        //k^2+k-2*n = 0
        return floor((-1 + sqrt(1 + (double)8*n))/2.0);
    }
};




////////////////////////////////
class Solution {
public:
    int arrangeCoins(int n) {
        //(k+1)*k/2 = n
        //k^2+k = 2*n
        //k^2+k+1/4 = 2*n+1/4
        //(k+1/2)^2 = 2*n+1/4
        //k+1/2 = (2*n+1/4)^0.5
        //k = (2*n+1/4)^0.5 - 1/2
        return floor(- 0.5 + sqrt((double)2*n+0.25));
    }
};
