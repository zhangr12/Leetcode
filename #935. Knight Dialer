// O(logN) matrix multiplication method
class Solution {
public:
    // idea: 
    // the power of matrix reveals the number of walks in an non-directed graph
    // https://math.stackexchange.com/questions/1890620/finding-path-lengths-by-the-power-of-adjacency-matrix-of-an-undirected-graph
    const int modular = pow(10, 9) + 7;
    int knightDialer(int N) {
        if(N == 1) return 10;
        vector<vector<long int>> t{{0, 0, 0, 0, 1, 0, 1, 0, 0, 0},{0, 0, 0, 0, 0, 0, 1, 0, 1, 0},{0, 0, 0, 0, 0, 0, 0, 1, 0, 1},{0, 0, 0, 0, 1, 0, 0, 0, 1, 0},{1, 0, 0, 1, 0, 0, 0, 0, 0, 1},{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{1, 1, 0, 0, 0, 0, 0, 1, 0, 0},{0, 0, 1, 0, 0, 0, 1, 0, 0, 0},{0, 1, 0, 1, 0, 0, 0, 0, 0, 0},{0, 0, 1, 0, 1, 0, 0, 0, 0, 0}};
        vector<vector<long int>> res(10, vector<long int>(10, 0));
        for(int i = 0; i < 10; i++) res[i][i] = 1;
        N -= 1;
        while(N){
            if(N%2) res = matMut(res, t);
            t = matMut(t, t);
            N /= 2;
        }
        return matSum(res);
    }
    
    // matrix multiplication: matrix m1 is l-by-m, m2 is m-by-n
    // return matrix has size l-by-n
    vector<vector<long int>> matMut(vector<vector<long int>> &m1, vector<vector<long int>> &m2){
        int l = m1.size(), m = m1[0].size(), n = m2[0].size();
        vector<vector<long int>> res(l, vector<long int>(n, 0));
        for(int i = 0; i < l; i++){
            for(int j = 0; j < n; j++){
                for(int k = 0; k < m; k++) res[i][j] = (res[i][j] + m1[i][k]*m2[k][j])%modular;
            }
        }
        return res;
    }
    
    int matSum(vector<vector<long int>> &m){
        int res = 0;
        for(int i = 0; i < m.size(); i++){
            for(int j = 0; j < m[0].size(); j++) res = (res + m[i][j])%modular;
        }
        return res;
    }
};


///////////////////////////////////////
// O(N) dp method
class Solution {
public:
    int knightDialer(int N) {
        // dp
        // use prevEnd to store the number of previous ending on key 0~9
        // initialization: prevEnd = 1 for 1 move
        // transition formular: crtEnd[i] += prevEnd[moves[i][j]]
        // here moves[i][j] means j can jump to i
        const int modular = pow(10, 9) + 7;
        // note that 5 cannot from anyother previous number
        vector<vector<int>> moves{{4, 6}, {6, 8}, {7, 9}, {4, 8}, {3, 9, 0}, {}, {1, 7, 0}, {2, 6}, {1, 3}, {2, 4}};
        vector<int> prevMove(10, 1);
        for(int i = 0; i < N-1; i++){
            vector<int> crtMove(10, 0);
            for(int j = 0; j < 10; j++){
                for(int k = 0; k < moves[j].size(); k++) crtMove[j] = (crtMove[j] + prevMove[moves[j][k]])%modular;
            }
            prevMove = crtMove;
        }
        int res = 0;
        for(int i = 0; i < 10; i++) res = (res + prevMove[i])%modular;
        return res;
    }
};
