class MyCalendar {
public:
    map<int, int> m;
    MyCalendar() {
        
    }
    
    bool book(int start, int end) {
        if(m.size() == 0){
            m[start] = end;
            return true;
        }
        map<int, int>::iterator next = m.lower_bound(start);
        // begin: check right
        // end: check left
        // middle: check both end
        if((next == m.begin() && !overlap(next, {start, end})) || (next == m.end() && !overlap(--next, {start, end})) || (next != m.end() && next != m.begin() && !overlap(next, {start, end}) && !overlap(--next, {start, end}))) {
            m[start] = end;
            return true;
        }
        return false;
    }
    
    bool overlap(map<int, int>::iterator it, pair<int, int> p){
        if(max(p.first, it->first) < min(p.second, it->second)) return true;
        return false;
    }
    
};

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar obj = new MyCalendar();
 * bool param_1 = obj.book(start,end);
 */
 
 
 /////////////////////////////////////
 // brutal force
 class MyCalendar {
public:
    vector<pair<int, int>> v;
    MyCalendar() {
        
    }
    
    bool book(int start, int end) {
        for(int i = 0; i < v.size(); i++){
            if(max(v[i].first, start) < min(v[i].second, end)) return false;
        }
        v.push_back({start, end});
        return true;
    }
};

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar obj = new MyCalendar();
 * bool param_1 = obj.book(start,end);
 */
