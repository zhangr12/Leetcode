// good explaination: https://leetcode.com/problems/minimum-height-trees/discuss/76055/Share-some-thoughts
class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {
        // idea: find leaf node first, then do BFS to leaf node, until they meet at certain node(s)
        if(n == 1) return {0};
        
        vector<unordered_set<int>> graph(n);
        // write edges information in the below format:
        // graph[i]: nodes connected to node i
        for(auto edge:edges){
            graph[edge.first].insert(edge.second);
            graph[edge.second].insert(edge.first);
        }
        
        vector<int> v1, v2, *p1, *p2;
        p1 = &v1;
        p2 = &v2;
        // find leaf nodes
        for(int i = 0; i < n; i++){
            if(graph[i].size() == 1) v1.push_back(i);
        }
        
        while(true){
            // now we do BFS to find the layer of nodes next to leaf node in v1 and store the information in v2
            for(int i = 0; i < p1->size(); i++){
                int crtNode = (*p1)[i];
                // we check all the neigbor nodes of current node
                for(auto neighbor:graph[crtNode]){
                    // to avoid re-visit current node, we remove current node from its neighbor's neighbor node list
                    graph[neighbor].erase(crtNode);
                    // we only push neighbor with one edge into v2, this is because we do not want to be disturbed by the short leaf path
                    // or in other words, we want all the leaf pointers move to the root(s) at the same speed
                    // the pointers move faster will reach the nodes which has more than one edges, these are the pointers we want to abandon
                    if(graph[neighbor].size() == 1) p2->push_back(neighbor);
                }
            }
            // we stop when there is no next layer
            if(p2->size() == 0) return *p1;
            swap(p1, p2);
            *p2 = {};
        }
    }
};
