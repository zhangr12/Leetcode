class Solution {
public:
    // idea: Boyer-Moore Algorithm and an observation that if we want to find all elements that appear more than n/k times, we will need at most k-1 candidates
    // https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html
    vector<int> majorityElement(vector<int>& nums) {
        if(nums.size() <= 1) return nums;
        int count1 = 0, count2 = 0, num1 = nums[0], num2 = nums[0], n = nums.size();
        for(int i = 0; i < n; i++){
            // we should start with chekcing whether nums[i] == num1 or num2
            if(nums[i] == num1){
                count1++;
            }
            else if(nums[i] == num2){
                count2++;
            }
            else if(count1 == 0){
                num1 = nums[i];
                count1++;
            }
            else if(count2 == 0){
                num2 = nums[i];
                count2++;
            }
            else{
                count1--;
                count2--;
            }
        }
        vector<int> res;
        count1 = 0;
        count2 = 0;
        for(int num:nums){
            // we need if and else if condition because num1 could equal to num2
            if(num == num1){
                count1++;
            }
            else if(num == num2){
                count2++;
            }
        }
        if(count1 > n/3) res.push_back(num1);
        if(count2 > n/3) res.push_back(num2);
        return res;
    }
};
