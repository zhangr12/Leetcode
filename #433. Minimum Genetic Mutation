class Solution {
public:
    int minMutation(string start, string end, vector<string>& bank) {
        // it might be possible that we need the change same element first in order to mutate to end
        // ACCTG -> ACGAC
        // bank: BCCTG, BCGTG, BCGAG, BCGAC, ACGAC
        // now, in order to move from ACCTG to ACGAC, the only path is:
        // ACCTG -> BCCTG -> BCGTG -> BCGAG -> BCGAC -> ACGAC
        // we need to change first A first in order to finish the mutation
        
        // idea: restricted bi-ended BFS
        if(start.size() != end.size()) return -1;
        unordered_set<string> sBank(bank.begin(), bank.end()), visitedS, visitedE, *vS, *vE;
        if(!sBank.count(end)) return -1;
        
        queue<string> qStart, qEnd, *pS, *pE;
        qStart.push(start);
        qEnd.push(end);
        pS = &qStart;
        pE = &qEnd;
        visitedS.insert(start);
        visitedE.insert(end);
        vS = &visitedS;
        vE = &visitedE;
        
        int steps = -1;
        vector<char> moves{'A', 'C', 'G', 'T'};
        while(pS->size() > 0){
            steps++;
            int num = pS->size();
            for(int i = 0; i < num; i++){
                string crt = pS->front();
                if(vE->count(crt)) return steps;
                pS->pop();
                for(int j = 0; j < crt.size(); j++){
                    char temp = crt[j];
                    for(int k = 0; k < 4; k++){
                        crt[j] = moves[k];
                        if(!vS->count(crt) && sBank.count(crt)){
                            //cout << crt << endl;
                            vS->insert(crt);
                            pS->push(crt);
                        }
                    }
                    crt[j] = temp;
                }
            }
            if(pS->size() > pE->size()){
                swap(pS, pE);
                swap(vS, vE);
            }
        }
        return -1;
    }
};
