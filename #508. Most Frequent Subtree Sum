/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> m1;
    unordered_map<TreeNode*, int> m2;
    vector<int> findFrequentTreeSum(TreeNode* root) {
        treeSum(root);
        int maxFreq = 0;
        for(auto item:m1) if(item.second > maxFreq) maxFreq = item.second;
        vector<int> res;
        for(auto item:m1) if(item.second == maxFreq) res.push_back(item.first);
        return res;
    }
    
    int treeSum(TreeNode* node){
        if(!node) return 0;
        if(m2.count(node)) return m2[node];
        
        int res = node->val + treeSum(node->left) + treeSum(node->right);
        m2[node] = res;
        m1[res]++;
        return res;
    }
};


///////////////////////////////
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> m;
    int max_num = INT_MIN;
    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector<int> res;
        if(root == NULL) return res;
        startFrom(root);
        for(auto it = m.begin(); it != m.end(); it++){
            if(it->second == max_num) res.push_back(it->first);
        }
        return res;
    }
    
    int startFrom(TreeNode* node){
        if(node == NULL){
            return 0;
        }
        int temp = node->val + startFrom(node->left) + startFrom(node->right);
        m[temp]++;
        if(m[temp] > max_num) max_num = m[temp];
        return temp;
    }
};



/////////////////////////////////////
// old version, same idea but not concise as the first one
class Solution {
public:
    unordered_map<int, int> m;
    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector<int> res;
        if(root == NULL) return res;
        startFrom(root);
        int max_num = INT_MIN;
        for(auto it = m.begin(); it != m.end(); it++){
            if(max_num < it->second) max_num = it->second;
        }
        for(auto it = m.begin(); it != m.end(); it++){
            if(it->second == max_num) res.push_back(it->first);
        }
        return res;
    }
    
    int startFrom(TreeNode* node){
        if(node->left == NULL && node->right == NULL){
            m[node->val]++;
            return node->val;
        }
        int temp;
        if(node->left != NULL && node->right != NULL){
            temp = node->val + startFrom(node->left) + startFrom(node->right);
        }
        else if(node->left != NULL){
            temp = node->val + startFrom(node->left);
        }
        else{
            temp = node->val + startFrom(node->right);
        }
        m[temp]++;
        return temp;
    }
};
