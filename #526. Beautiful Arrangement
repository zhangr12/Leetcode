// BFS
class Solution {
public:
    int countArrangement(int N) {
        vector<int> temp(N, 0);
        for(int i = 0; i < N; i++) temp[i] = i+1;
        return bfs(temp);
    }
    
    int bfs(vector<int> v){
        // first position can be anything
        if(v.size() == 1) return 1;
        int n = v.size(), ans = 0;
        for(int i = v.size() - 1; i >= 0; i--){
            // check which number can be put at position n
            if(v[i]%n == 0 || n%v[i] == 0){
                // copy the vector
                vector<int> temp = v;
                // erase that number since it has been used at position n
                temp.erase(temp.begin() + i);
                // push the rest of the numbers into the next round
                ans += bfs(temp);
            }
        }
        return ans;
    }
};

////////////////////////////////
// recursive based method
class Solution {
public:
    int countArrangement(int N) {
         vector<int> temp(N, 0);
        for(int i = 0; i < N; i++) temp[i] = i+1;
        return count(N, temp);
    }
    
    int count(int n, vector<int> &v){
        if(n <= 0) return 1;
        int ans = 0;
        for(int i = 0; i < n; i++){
            if(n%v[i] == 0 || v[i]%n == 0){
                swap(v[i], v[n-1]);
                ans += count(n-1, v);
                swap(v[i], v[n-1]);
            }
        }
        return ans;
    }
};
