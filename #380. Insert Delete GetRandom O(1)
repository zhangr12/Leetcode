class RandomizedSet {
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(m.count(val)) return false;
        v.push_back(val);
        m[val] = v.size() - 1;
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(m.count(val) == 0) return false;
        int remove_idx = m[val], end_element = v.back();
        v[remove_idx] = end_element;
        m[end_element] = remove_idx;
        v.pop_back();
        // erase at the very end, since val could equal to end_element
        m.erase(val);
        return true;
        
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        if(v.size() == 0) return -1;
        return v[rand()%(int)v.size()];
    }
private:
    // use v to store the number
    vector<int> v;
    // use m to map number to index
    // update index properly when remove element from v and m
    unordered_map<int, int> m;
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
