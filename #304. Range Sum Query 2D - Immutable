class NumMatrix {
public:
    // similar idea wiht 1D array
    // let m[i][j] denote the sum of elements in submatrix [0,0,i,j]
    // to find sum of elements in submatrix [k,l,i,j], we simply need to calculate m[i][j]-m[k-1][j]-m[i][l-1]+m[k-1][l-1]
    NumMatrix(vector<vector<int>> matrix) {
        for(int i = 0; i < matrix.size(); i++){
            m.push_back(vector<long>(matrix[0].size(), 0));
            for(int j = 0; j < matrix[0].size(); j++){
                m[i][j] += matrix[i][j];
                if(i-1 >= 0) m[i][j] += m[i-1][j];
                if(j-1 >= 0) m[i][j] += m[i][j-1];
                if(i-1 >= 0 && j-1 >= 0) m[i][j] -= m[i-1][j-1];
            }
        }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        int res = m[row2][col2];
        if(row1-1 >= 0) res -= m[row1-1][col2];
        if(col1-1 >= 0) res -= m[row2][col1-1];
        if(row1-1 >= 0 && col1-1 >= 0) res += m[row1-1][col1-1];
        return res;
    }
private:
    vector<vector<long>> m;
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */
