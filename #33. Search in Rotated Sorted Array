// draw the graph!
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size() == 0 || (nums.back() < target && nums[0] > target)) return -1;
        int l = 0, r = nums.size()-1;
        while(l <= r){
            if(nums[l] <= nums[r]){
                auto it = lower_bound(nums.begin() + l, nums.begin() + r + 1, target);
                if(*it != target) return -1;
                return it - nums.begin();
            }
            else{
                int mid = l + (r-l)/2;
                if(nums[mid] == target) return mid;
                if(nums[l] == target) return l;
                if(nums[r] == target) return r;
                // one side has to be increasing, check the end point
                if(nums[mid] < nums[r]){
                    if(target > nums[mid] && target < nums[r]){
                        l = mid+1;
                    }
                    else{
                        r = mid-1;
                    }
                }
                else{
                    if(nums[l] < target && nums[mid] > target){
                        r = mid-1;
                    }
                    else{
                        l = mid+1;
                    }
                }
            }
        }
        if(nums[l] == target) return l;
        return -1;
    }
};
