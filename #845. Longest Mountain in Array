class Solution {
public:
	// idea: two passes
	// first pass from left to right, find the left side of the mountain
	// second pass from right to left, find the right side of the mountain
	// the length of the mountain is equal to left+right-1
	// note that both left and right should be greater than 0
    int longestMountain(vector<int>& A) {
        int n = A.size();
		vector<int> l(n, 1), r(n, 1);
		for(int i = 1; i < n; i++){
			if(A[i-1] < A[i]){
				l[i] = l[i-1] + 1;
			}
		}
		int res = 0;
		for(int i = n-2; i >= 0; i--){
			if(A[i] > A[i+1]) r[i] = r[i+1] + 1;
			if(l[i] == 1 || r[i] == 1) continue;
			res = max(res, l[i] + r[i] - 1);
		}
		return res >= 3 ? res : 0;
    }
};
