// Start from one element and keep rotating until we have rotated n different elements.
// Think: why this method works?
// if we start from 0, then by skip every k steps, we can reach all the elements at position S1 (here S1 is a set)
// if count(S1) is less than nums, we start from 1, then we move all the elements in the set S2
// note that S2 has no intersection with S1 and if it has, then S1 == S2
// Question: will Sk's first element greater than Si's (i < k) non-first elements?
// Answer: No, this is impossible. Since both + and % are linear operator, so Sk's first element will always less than Si's (i<k) non-first element
// Example:
// 1 2 3 4 5 6 7 8
// k = 2
// 1 3 5 7 1
// 2 4 6 8
// k = 3
// 1 4 7 2 5 8 3 6
// k = 4
// 1 5 1
// 2 6 2
// 3 7 3
// 4 8 4
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int start = 0, crt = 0, temp1, temp2, count = 0, s = nums.size();
        while(count < s){
            temp1 = nums[crt];
            do{
                temp2 = nums[(crt+k)%s];
                nums[(crt+k)%s] = temp1;
                temp1 = temp2;
                count++;
                crt = (crt + k)%s;
            }while(start != crt);
            start++;
            crt = start;
        }
    }
};
