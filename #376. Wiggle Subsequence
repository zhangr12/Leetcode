class Solution {
public:
    // greedy algorithm
    // use prev to remember the last element in wiggle sequence(we do not have to explicitely construct the wiggle sequence)
    // if now we want next element to be smaller than prev
    // if current element is smaller than prev, we set prev = current element and increase the wiggle sequence by 1
    // else if current element is greater than prev, we make prev = current element, by doing this we increase the change to meet smaller element later
    // the logic to find the next greater element is the same
    // remember to skip if two consequtive elements are the same
    int wiggleMaxLength(vector<int>& nums) {
        if(nums.size() <= 1) return nums.size();
        
        int start = 1;
        while(nums[start] == nums[start - 1]) start++;
        if(start == nums.size()) return 1;
        
        bool increase;
        if(nums[start-1] < nums[start]){
            increase = true;
        }
        else{
            increase = false;
        }
        int res = 2, prev = nums[start];
        for(int i = start + 1; i < nums.size(); i++){
            if(nums[i-1] == nums[i]) continue;
            // previous is increase, now we need to find decrease one
            if(increase){
                // it is still increasing
                if(prev < nums[i]){
                    // set prev to be larger number to increase the chance to meet smaller element number later
                    prev = nums[i];
                }
                else{
                    res++;
                    prev = nums[i];
                    increase = false;
                }
            }
            // previous is decreasing, now we need to find increase one
            else{
                if(prev < nums[i]){
                    res++;
                    prev = nums[i];
                    increase = true;
                }
                else{
                    // set prev to be smaller number to increase the chance to meet lager element number later
                    prev = nums[i];
                }
            }
        }
        return res;
    }
};
