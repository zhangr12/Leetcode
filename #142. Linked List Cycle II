// idea: 
// for fast, we move two steps everytime, for slow, we move one step at a time
// assume the circle is length m, the straight part has length n
// when fast and slow meet, the distance fast has traveled is a*m more than slow, here a is a positive number
// this means the distance slow has traveled is a*m (since fast's speed is twice slow's speed)
// now we put fast back to start point, and let slow stay at the meet point, move both of them one step at a time
// then when fast travel n, slow traveled a*m+n, so they must meet at the start of the circle
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(head == NULL || head->next == NULL || head->next->next == NULL) return nullptr;
        ListNode *n1, *n2;
        n1 = head->next;
        n2 = head->next->next;
        while(n1 != n2){
            n1 = n1->next;
            if(n2->next == NULL || n2->next->next == NULL) return nullptr;
            n2 = n2->next->next;
        }
        n2 = head;
        while(n1 != n2){
            n1 = n1->next;
            n2 = n2->next;
        }
        return n1;
    }
};



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        // assume the linked list is n+m, where m is the length of the circle, we need to find n
        if(head == NULL || head->next == NULL || head->next->next == NULL) return nullptr;
        // first time meet each other
        ListNode *n1 = head->next, *n2 = head->next->next;
        while(n1 != n2){
            n1 = n1->next;
            if(n2->next == NULL) return nullptr;
            n2 = n2->next->next;
            if(n2 == NULL) return nullptr;
        }
        
        // second time meet each other, calculate m
        int m = 1;
        n1 = n1->next;
        n2 = n2->next->next;
        while(n1 != n2){
            n1 = n1->next;
            n2 = n2->next->next;
            m++;
        }
        
        // two pointers, one move m steps first, then move both forward until they meet, that is the point we looking for
        n1 = head;
        n2 = head;
        for(int i = 0; i < m; i++) n2 = n2->next;
        while(n1 != n2){
            n1 = n1->next;
            n2 = n2->next;
        }
        return n1;
    }
};
