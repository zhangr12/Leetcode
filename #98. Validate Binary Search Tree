/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    // in order traversal: BST's in order traversal gives non-decreasing order
    long int crt = LONG_MIN;
    bool isValidBST(TreeNode* root) {
        if(!root) return true;
        bool left = isValidBST(root->left);
        if(crt >= root->val) return false;
        crt = root->val;
        bool right = isValidBST(root->right);
        return left && right;
    }
};

///////////////////////////////////
// shrink interval
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        long int low = LONG_MIN, high = LONG_MAX;
        return helper(root, low, high);
    }
    
    bool helper(TreeNode* node, long int low, long int high){
        if(!node) return true;
        if(node->val <= low || node->val >= high) return false;
        return helper(node->left, low, node->val) && helper(node->right, node->val, high);
    }
    
};
