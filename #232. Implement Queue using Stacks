class MyQueue {
public:
    stack<int> s_in, s_out;
    int n;
    /** Initialize your data structure here. */
    MyQueue() {
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        s_in.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int res;
        if (!s_out.empty()){
            res = s_out.top();
            s_out.pop();
            return res;
        }
        else{
            while(!s_in.empty()){
                s_out.push(s_in.top());
                s_in.pop();
            }
            res = s_out.top();
            s_out.pop();
            return res;
        }
    }
    
    /** Get the front element. */
    int peek() {
        int res;
        if (!s_out.empty()){
            res = s_out.top();
            return res;
        }
        else{
            while(!s_in.empty()){
                s_out.push(s_in.top());
                s_in.pop();
            }
            res = s_out.top();
            return res;
        }
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return s_in.empty() && s_out.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */
