class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        // monotionic queue
        // we use deque to store the index of element
        // we push new element from the back. When push the new element, we keep checking whether the element at the back is less than current element
        // if it is, we pop_back the last element in deque
        // in each loop, we also check whether the first element's index is less than i-k+1, if it is, we pop it from the front(since its no longer in the window, the elements in the window are i, i-1, ..., i-k+1)
        // at the end of each loop, the front element is what we need(given i is greater than or equal to k-1, since we need to first move k steps to build the window)
        if(nums.size() == 0) return {};
        
        deque<int> dq;
        vector<int> res;
        
        for(int i = 0; i < nums.size(); i++){
            while(!dq.empty() && nums[dq.back()] < nums[i]) dq.pop_back();
            dq.push_back(i);
            if(dq.front() < i-k+1) dq.pop_front();
            if(i >= k-1) res.push_back(nums[dq.front()]);
        }
        
        return res;
    }
};
