class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        if(nums.size() == 0) return {};
        
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        for(auto num:nums){
            helper(res, num);
        }
        
        int idx = 0, length = 0;
        for(int i = 0; i < res.size(); i++){
            if(res[i].size() > length){
                length = res[i].size();
                idx = i;
            }
        }
        return res[idx];
    }
    
    void helper(vector<vector<int>> &res, int crtNum){
        int n = res.size(), length = 0, idx = -1;
        
        for(int i = 0; i < n; i++){
            if(crtNum%res[i].back() == 0 && res[i].size() > length){
                idx = i;
                length = res[i].size();
            }
        }
        if(idx == -1){
            res.push_back({crtNum});
        }
        else{
            vector<int> temp = res[idx];
            temp.push_back(crtNum);
            res.push_back(temp);
        }
        
    }
};
