class Solution {
public:
    // idea:
    // similar with three non-overlap sum
    // first find maximum sum for intervalwith length L
    // left[i] means maximum sum of interval within A[0]~A[i] and has length L
    // right[i] means maximum sum of interval within A[i]~A[N-1] and has length L
    // we can find left and right vector using dp
    // then for each fixed interval with length M, we just need to find the maximum interval with length L from its left or right side
    int maxSumTwoNoOverlap(vector<int>& A, int L, int M) {
        int N = A.size();
        vector<int> left(N, -1), right(N, -1);
        int crt = accumulate(A.begin(), A.begin()+L, 0);
        left[L-1] = crt;
        for(int i = L; i < N; ++i){
            crt += -A[i-L] + A[i];
            left[i] = max(left[i-1], crt);
        }
        crt = accumulate(A.end()-L, A.end(), 0);
        right[N-L] = crt;
        for(int i = N-L-1; i >= 0; --i){
            crt += -A[i+L] + A[i];
            right[i] = max(right[i+1], crt);
        }
        crt = accumulate(A.begin(), A.begin()+M, 0);
        int res = crt+right[M];
        for(int i = 1; i <= N-M; ++i){
            crt += -A[i-1] + A[M+i-1];
            if(left[i-1] >= 0) res = max(res, crt + left[i-1]);
            if(M+i < N && right[M+i] >= 0) res = max(res, crt + right[M+i]);
        }
        return res;
    }
};
