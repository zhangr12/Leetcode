// Normalise a string to a standard pattern.
class Solution {
public:
    vector<string> findAndReplacePattern(vector<string>& words, string pattern) {
        string p = helper(pattern);
        vector<string> res;
        for(string word:words){
            if(word.size() != pattern.size()) continue;
            if(helper(word) == p) res.push_back(word);
        }
        return res;
    }
    
    string helper(string s){
        unordered_map<char, int> m;
        // give each char an index, the given index is corresponding to the first time the char shows up
        for(char letter:s){
            if(!m.count(letter)) m[letter] = m.size();
        }
        string res = s;
        for(int i = 0; i < res.size(); i++) res[i] = 'a' + m[res[i]];
        return res;
    }
};
