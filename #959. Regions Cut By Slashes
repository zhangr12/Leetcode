class Solution {
public:
    // transfer this problem into a graph problem then perform BFS
    int regionsBySlashes(vector<string>& grid) {
        int n = grid.size();
        
        vector<vector<int>> graph(n*3, vector<int>(n*3, 0));
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == '/') graph[i*3][j*3+2] = graph[i*3+1][j*3+1] = graph[i*3+2][j*3] = 1;
                if(grid[i][j] == '\\') graph[i*3][j*3] = graph[i*3+1][j*3+1] = graph[i*3+2][j*3+2] = 1;
            }
        }
        
        // BFS
        int region = 0;
        // let graph[i][j] == 2 means it has been visited
        for(int i = 0; i < 3*n; i++){
            for(int j = 0; j < 3*n; j++){
                if(graph[i][j] == 2 || graph[i][j] == 1) continue;
                region++;
                graph[i][j] = 2;
                queue<pair<int, int>> q;
                q.push({i, j});
                while(!q.empty()){
                    auto crt = q.front();
                    q.pop();
                    int x = crt.first, y = crt.second;
                    if(x-1 >= 0 && graph[x-1][y] == 0){
                        graph[x-1][y] = 2;
                        q.push({x-1, y});
                    }
                    if(x+1 < 3*n && graph[x+1][y] == 0){
                        graph[x+1][y] = 2;
                        q.push({x+1, y});
                    }
                    if(y-1 >= 0 && graph[x][y-1] == 0){
                        graph[x][y-1] = 2;
                        q.push({x, y-1});
                    }
                    if(y+1 < 3*n && graph[x][y+1] == 0){
                        graph[x][y+1] = 2;
                        q.push({x, y+1});
                    }
                }
            }
        }
        return region;
    }
};
