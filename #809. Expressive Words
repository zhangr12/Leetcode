class Solution {
public:
    int expressiveWords(string S, vector<string>& words) {
        // write S in compressed expression
        vector<pair<char, int>> s;
		int i = 0;
		while(i < S.size()){
			int j = i;
			while(j < S.size() && S[j] == S[i]) j++;
			s.push_back({S[i], j-i});
			i = j;
		}
		// check each word based on the rule
		int res = 0;
		for(auto word:words){
			if(stretchy(s, word)) res++;
		}
		return res;
    }
	
	bool stretchy(vector<pair<char, int>> &w1, string &w2){
		int i = 0;
		for(auto p:w1){
			if(i == w2.size()) return false;
			if(p.first != w2[i]) return false;
			int j = i;
			while(j < w2.size() && w2[j] == w2[i]) j++;
			int temp = j-i;
			i = j;
			if((p.second == 2 && temp == 1) || p.second < temp) return false;
		}
		return true;
	}
};
