// BFS
class Solution {
public:
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        set<int> visited;
        queue<int> keys;
        keys.push(0);
        int key;
        vector<int> crt_keys;
        while(!keys.empty()){
            key = keys.front();
            keys.pop();
            if (visited.find(key) == visited.end()){
                visited.insert(key);
                if(visited.size() == rooms.size()){
                    return true;
                }
            }
            else{
                continue;
            }
            crt_keys = rooms[key];
            for(int i = 0; i < crt_keys.size(); i++){
                keys.push(crt_keys[i]);
            }
        }
        return false;
    }
};

// DFS
class Solution {
public:
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        set<int> visited;
        stack<int> keys;
        keys.push(0);
        int key;
        vector<int> crt_keys;
        while(!keys.empty()){
            key = keys.top();
            keys.pop();
            if (visited.find(key) == visited.end()){
                visited.insert(key);
                if(visited.size() == rooms.size()){
                    return true;
                }
            }
            else{
                continue;
            }
            crt_keys = rooms[key];
            for(int i = 0; i < crt_keys.size(); i++){
                keys.push(crt_keys[i]);
            }
        }
        return false;
    }
};
