class Solution {
public:
    // idea: record the value on y axis, later we search these intervals on y axis
    // sort the rectangulars based on their start point on x axis
    // for each y interval, see how much area we can cover on x axis
    int rectangleArea(vector<vector<int>>& rects) {
        sort(rects.begin(), rects.end(), [](const vector<int> &v1, const vector<int> &v2){ return v1[0] < v2[0]; });
        
        vector<int> ys;
        for(auto r:rects){
            ys.push_back(r[1]);
            ys.push_back(r[3]);
        }
        
        // sort ys and unique
        ys.erase(unique(ys.begin(), ys.end()), ys.end());
        sort(ys.begin(), ys.end());
        
        long long int mod = pow(10, 9) + 7, res = 0;
        // for each interval on y axis
        for(int i = 1; i < ys.size(); ++i){
            int x_start = rects[0][0];
            int x_end = x_start;
            long long int height = ys[i] - ys[i-1];
            // see how much areas we can cover on x axis
            for(auto& r:rects){
                // check if current rectangular is in current y range
                if(r[1] <= ys[i-1] && r[3] >= ys[i]){
                    // check if we need to update x_start
                    if(r[0] > x_end){
                        res = (res + (x_end-x_start)*height)%mod;
                        x_start = r[0];
                        x_end = r[2];
                    }
                    // check if we need to update x_end
                    else{
                        x_end = max(x_end, r[2]);
                    }
                }
            }
            res = (res + (x_end - x_start)*height)%mod;
        }
        return res;
    }
};
