/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 // When A and B have the same length, we only need to move along them at the same time and check if any of the node meet or not
 // So first we find the length difference "diff" between A and B, then we move the pointer of the longer linked list "diff" times first
 // Now, we can move two pointers at the same time and check intersection
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (headA == NULL || headB == NULL) return NULL;
        ListNode *n1 = headA, *n2 = headB;
        while(n1 != NULL and n2 != NULL){
            n1 = n1->next;
            n2 = n2->next;
        }
        // find length difference
        int diff = 0;
        // if n2 is the longer one, more its pointer first for diff steps
        if(n1 == NULL){
            while(n2 != NULL){
                diff++;
                n2 = n2->next;
            }
            n1 = headA;
            n2 = headB;
            for(int i = 0; i < diff; i++) n2 = n2->next;
            while (n1 != NULL && n2 != NULL){
                if(n1 == n2) return n1;
                n1 = n1->next;
                n2 = n2->next;
            }
            return NULL;
        }
        else{
            // if n1 is the longer one, more its pointer first for diff steps
            while(n1 != NULL){
                diff++;
                n1 = n1->next;
            }
            n1 = headA;
            n2 = headB;
            for(int i = 0; i < diff; i++) n1 = n1->next;
            while(n1 != NULL && n2 != NULL){
                if(n1 == n2) return n1;
                n1 = n1->next;
                n2 = n2->next;
            }
            return NULL;
        }
    }
};


/////////////////////////////////
// less intuitive, especially why we need to return p1 at the very end
// ListA = A + intersection
// ListB = B + intersection
// with this solution, it's like we concat ListA and ListB then find the intersection.
// ListA+ListB = A + intersection + B +intersection
// ListB + ListA = B + intersection + A + intersection
// Then we can find the intersections.
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
{
    ListNode *p1 = headA;
    ListNode *p2 = headB;
        
    if (p1 == NULL || p2 == NULL) return NULL;

    while (p1 != NULL && p2 != NULL && p1 != p2) {
        p1 = p1->next;
        p2 = p2->next;

        //
        // Any time they collide or reach end together without colliding 
        // then return any one of the pointers.
        //
        if (p1 == p2) return p1;

        //
        // If one of them reaches the end earlier then reuse it 
        // by moving it to the beginning of other list.
        // Once both of them go through reassigning, 
        // they will be equidistant from the collision point.
        //
        if (p1 == NULL) p1 = headB;
        if (p2 == NULL) p2 = headA;
    }
        
    return p1;
}
