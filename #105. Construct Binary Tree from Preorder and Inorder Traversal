/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preorderIndex = 0;
        return buildTree(preorder, preorderIndex, inorder, 0, inorder.size()-1);
    }
    
    // Algorithm: buildTree()
    // 1) Pick an element from Preorder. Increment a Preorder Index Variable (preIndex in below code) to pick next element in next recursive call.
    // 2) Create a new tree node tNode with the data as picked element.
    // 3) Find the picked elementâ€™s index in Inorder. Let the index be inIndex.
    // 4) Call buildTree for elements before inIndex and make the built tree as left subtree of tNode.
    // 5) Call buildTree for elements after inIndex and make the built tree as right subtree of tNode.
    // 6) return tNode.
    TreeNode* buildTree(vector<int> &preorder, int &preorderIndex, vector<int> &inorder, int l, int r){
        if(l > r || l == -1 || r == -1) return NULL;
        
        int crtVal = preorder[preorderIndex];
        preorderIndex++;
        TreeNode* node = new TreeNode(crtVal);
        if(l == r) return node;
        
        // note that here we cannot use binary search since the inorder vector is not a sorted vector
        int inIndex = findIndex(inorder, l, r, crtVal);
        
        TreeNode* left = buildTree(preorder, preorderIndex, inorder, l, inIndex-1);
        TreeNode*right = buildTree(preorder, preorderIndex, inorder, inIndex+1, r);
        
        node->left = left;
        node->right = right;
        
        return node;
    }
    
    int findIndex(vector<int> &v, int l, int r, int target){
        for(int i = l; i <= r; i++){
            if(v[i] == target) return i;
        }
        return -1;
    }
};
