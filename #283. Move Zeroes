// Shift non-zero values as far forward as possible
// Fill remaining space with zeros
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int insertPos = 0;
        for(int num:nums){
            if(num != 0){
                nums[insertPos] = num;
                insertPos++;
            }
        }
        while(insertPos < nums.size()){
            nums[insertPos] = 0;
            insertPos++;
        }
    }
};



////////////////////////////////////
// always move j to the next zero explicitly
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int j = 0;
        int temp;
        for(int i = 0; i < nums.size(); i++){
            while (nums[j] != 0 && j < nums.size()){
                j++;
            }
            if (j >= nums.size() - 1) break;
            if (nums[i] == 0){
                continue;
            }
            else{
                if(i > j){
                    temp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = temp;
                }
            }
        }
    }
};


///////////////////////////////////////////
// "implicitly" move j to the next zero
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int j = 0;
        int temp;
        for (int i = 0; i < nums.size(); i++){
            if (nums[i] != 0){
                temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                j++;
            }
        }
    }
};
