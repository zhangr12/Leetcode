class Solution {
public:
    string multiply(string num1, string num2) {
        if(num1 == "0" || num2 == "0") return "0";
        queue<string> q;
        for(int i = num1.size()-1; i >= 0 ; i--){
            string temp = numMut(num1[i], num2);
            cout << temp << endl;
            q.push(temp);
        }
        
        string res = q.front();
        q.pop();
        int zeros = 1;
        while(!q.empty()){
            string temp = q.front();
            q.pop();
            for(int i = 0; i < zeros; i++) temp = temp + "0";
            zeros++;
            if(res.size() < temp.size()){
                res = numAdd(temp, res);
            }
            else{
                res = numAdd(res, temp);
            }
        }
        return res;
    }
    
    // multiply char c with string s
    string numMut(char c, string &s){
        if(c == '0' || s == "0") return "0";
        int carry = 0, numC = c-'0';
        string res = "";
        for(int i = s.size()-1; i >= 0; i--){
            int crtNum = s[i]-'0';
            int temp = crtNum*numC + carry;
            carry = temp/10;
            temp %= 10;
            res = to_string(temp) + res;
        }
        if(carry != 0) res = to_string(carry) + res;
        return res;
    }
    
    // s1.size() >= s2.size()
    string numAdd(string &s1, string &s2){
        int carry = 0;
        string res = "";
        int i = s2.size()-1, j = s1.size() - 1;
        while(i >= 0){
            int temp = s1[j]-'0'+s2[i] -'0'+carry;
            carry = temp/10;
            temp %= 10;
            res = to_string(temp) + res;
            i--;
            j--;
        }
        while(j >= 0){
            int temp = s1[j]-'0'+carry;
            carry = temp/10;
            temp %= 10;
            res = to_string(temp) + res;
            j--;
        }
        if(carry != 0) res = "1" + res;
        return res;
    }
    
    
};
