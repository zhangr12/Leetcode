class Solution {
public:
	// idea: longest common subsequence
	// dp with size m by n, where m is the size of A, n is the size of B
	// dp[i][j]: longest common subsequence of A[0~i] and B[0~j]
	// initialization: dp[0][j] = 1 if B[0~j] contains A[0]; dp[j][0] = 1 if A[0~j] contains B[0]
	// transition formula: if(A[i] == B[j]) dp[i][j] = dp[i-1][j-1] + 1;
	// else dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
	// return max element in dp[m-1][n-1]
    int maxUncrossedLines(vector<int>& A, vector<int>& B) {
        int m = A.size(), n = B.size();
		vector<vector<int>> dp(m, vector<int>(n, 0));
		
		for(int i = 0; i < m; ++i){
			if(A[i] == B[0]){
				dp[i][0] = 1;
			}
			else{
				if(i-1 >= 0) dp[i][0] = dp[i-1][0];
			}
		}
		
		for(int i = 0; i < n; ++i){
			if(A[0] == B[i]){
				dp[0][i] = 1;
			}
			else{
				if(i-1 >= 0) dp[0][i] = dp[0][i-1];
			}
		}
		
		for(int i = 1; i < m; ++i){
			for(int j = 1; j < n; ++j){
				if(A[i] == B[j]){
					dp[i][j] = dp[i-1][j-1] + 1;
				}
				else{
					dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
				}
			}
		}
		
		return dp[m-1][n-1];
    }
};
