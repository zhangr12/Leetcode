class Solution {
public:
    bool buddyStrings(string A, string B) {
        if(A.size() != B.size()) return false;
        unordered_map<char, int> m;
        int first = -1, count = 0;
        for(int i = 0; i < A.size(); i++){
            m[A[i]]++;
            if(A[i] == B[i]){
                continue;
            }
            else{
                count++;
                if(count > 2) return false;
                if(first == -1){
                    first = i;
                }
                else{
                    if(A[first] == B[i] && A[i] == B[first]){
                        continue;
                    }
                    else{
                        return false;
                    }
                }
            }
        }
        if(count == 0){
            unordered_map<char, int>::iterator it;
            for(it = m.begin(); it != m.end(); it++){
                if(it->second > 1) return true;
            }
            return false;
        }
        if(count == 1) return false;
        return true;
    }
};
