class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        // two end BFS
        // visited1 stores visited node generated from q1
        // visited2 stores visited node generated from q2
        unordered_set<string> visited1, visited2, *v1, *v2, dead(deadends.begin(), deadends.end());
        if(dead.count("0000")) return -1;
        queue<string> q1, q2, *p1, *p2;
        q1.push("0000");
        q2.push(target);
        // let p1 points to q1
        // let p2 points to q2
        p1 = &q1;
        p2 = &q2;
        visited1.insert("0000");
        visited2.insert(target);
        // let v1 points to visited1
        // let v2 points to visited2
        v1 = &visited1;
        v2 = &visited2;
        int steps = 0;
        while((*p1).size() != 0){
            int num = (*p1).size();
            for(int i = 0; i < num; i++){
                string crt = p1->front();
                p1->pop();
                // if node pop from p1 is visited in v2, this means two BFS meet each other, return
                if(v2->count(crt)) return steps;
                for(int i = 0; i < 4; i++){
                    string temp = crt;
                    if(temp[i] == '0'){
                        temp[i] = '9';
                        if(v1->count(temp) == 0 && dead.count(temp) == 0){
                            v1->insert(temp);
                            p1->push(temp);
                        }
                        temp[i] = '1';
                        if(v1->count(temp) == 0 && dead.count(temp) == 0){
                            v1->insert(temp);
                            p1->push(temp);
                        }
                    }
                    else if(temp[i] == '9'){
                        temp[i] = '0';
                        if(v1->count(temp) == 0 && dead.count(temp) == 0){
                            v1->insert(temp);
                            p1->push(temp);
                        }
                        temp[i] = '8';
                        if(v1->count(temp) == 0 && dead.count(temp) == 0){
                            v1->insert(temp);
                            p1->push(temp);
                        }
                    }
                    else{
                        temp[i] += 1;
                        if(v1->count(temp) == 0 && dead.count(temp) == 0){
                            v1->insert(temp);
                            p1->push(temp);
                        }
                        temp[i] -= 2;
                        if(v1->count(temp) == 0 && dead.count(temp) == 0){
                            v1->insert(temp);
                            p1->push(temp);
                        }
                    }
                }
            }
            // everytime we want to use the side with shorter length
            // so if p1's size is greater than p2
            // we switch p1 and p2, v1 and v2
            if(p1->size() > p2->size()){
                swap(p1, p2);
                swap(v1, v2);
            }
            steps++;
        }
        return -1;
    }
};





//////////////////////////////////
class Solution {
public:
    // BFS
    int openLock(vector<string>& deadends, string target) {
        unordered_set<string> visited, dead(deadends.begin(), deadends.end());
        if(dead.count("0000")) return -1;
        queue<string> q;
        q.push("0000");
        visited.insert("0000");
        int steps = 0;
        while(!q.empty()){
            int num = q.size();
            for(int i = 0; i < num; i++){
                string crt = q.front();
                if(crt == target) return steps;
                q.pop();
                for(int i = 0; i < 4; i++){
                    if(crt[i] == '0'){
                        string temp = crt.substr(0, i) + "9" + crt.substr(i+1);
                        if(visited.count(temp) == 0 && dead.count(temp) == 0){
                            q.push(temp);
                            visited.insert(temp);
                        }
                        temp = crt.substr(0, i) + "1" + crt.substr(i+1);
                        if(visited.count(temp) == 0 && dead.count(temp) == 0){
                            q.push(temp);
                            visited.insert(temp);
                        }
                    }
                    else if(crt[i] == '9'){
                        string temp = crt.substr(0, i) + "8" + crt.substr(i+1);
                        if(visited.count(temp) == 0 && dead.count(temp) == 0){
                            q.push(temp);
                            visited.insert(temp);
                        }
                        temp = crt.substr(0, i) + "0" + crt.substr(i+1);
                        if(visited.count(temp) == 0 && dead.count(temp) == 0){
                            q.push(temp);
                            visited.insert(temp);
                        }
                    }
                    else{
                        string temp = crt;
                        temp[i] += 1;
                        if(visited.count(temp) == 0 && dead.count(temp) == 0){
                            q.push(temp);
                            visited.insert(temp);
                        }
                        temp = crt;
                        temp[i] -= 1;
                        if(visited.count(temp) == 0 && dead.count(temp) == 0){
                            q.push(temp);
                            visited.insert(temp);
                        }
                    }
                }
            }
            steps++;
        }
        return -1;
    }
};
