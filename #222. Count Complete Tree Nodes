/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    // use binary search to count for last level
    int countNodes(TreeNode* root) {
        // find height
        int h = -1;
        TreeNode* node = root;
        while(node){
            node = node->left;
            h++;
        }
        int res = pow(2, h)-1;
        // last level can have at most crtNum nodes
        int crtNum = res+1;
        node = root;
        while(node){
            // if node->right == nullptr, we know that left child node must be a leaf, add 1 to result and break
            if(node->right == nullptr){
                res++;
                break;
            }
            // find mid
            TreeNode* mid = node->right;
            for(int i = 1; i < h; i++) mid = mid->left;
            if(mid){
                // if mid exist, we know at least the first half part of the last level(with node as root) is full
                res += crtNum/2;
                // keep search right subtree
                node = node->right;
            }
            else{
                // else, we search left subtree
                node = node->left;
            }
            // move one level down
            h--;
            crtNum /= 2;
        }
        return res;
    }
};
