class Solution {
public:
    string fractionAddition(string expression) {
        int i = 0, j, denominator = 1, numerator = 0, tempd, tempn;
        while(i < expression.size()){
            j = i;
            // locate numerator
            while(expression[j] != '/') j++;
            tempn = stoi(expression.substr(i, j-i));
            i = j+1;
            j = i;
            // locate denominator
            while(expression[j] >= '0' && expression[j] <= '9') j++;
            tempd = stoi(expression.substr(i, j-i));
            i = j;
            // now combine with previous n/d
            // cout << tempn << " " << tempd << endl;
            // calculate numerator
            numerator = tempn*denominator+tempd*numerator;
            // calculate denominator
            denominator = denominator*tempd;
            // cout << denominator << " " << numerator << endl;
            // find the greatest common dividor of numerator and denominator
            int g = abs(__gcd(denominator, numerator));
            // make the fraction number irreducible
            denominator /= g;
            numerator /= g;
        }
        return to_string(numerator) + "/" + to_string(denominator);
    }
};
