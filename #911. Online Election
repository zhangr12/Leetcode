class TopVotedCandidate {
public:
    // m[times[i]] = winner at times[i]
    map<int, int> m;
    TopVotedCandidate(vector<int> persons, vector<int> times) {
        int n = persons.size(), lead = -1;
        // count[persons[i]] =being voted times
        unordered_map<int, int> count;
        for(int i = 0; i < n; i++){
            count[persons[i]]++;
            // if current person's vote is greater than or equal to previous lead's vote, we update lead
            // we use >= because in the case of a tie, we want the most recent vote (among tied candidates) wins.
            // if we want the least recent vote wins, we should use >
            if(count[persons[i]] >= count[lead]) lead = persons[i];
            m[times[i]] = lead;
        }
    }
    
    int q(int t) {
        auto it = m.upper_bound(t);
        it--;
        return it->second;
    }
};

/**
 * Your TopVotedCandidate object will be instantiated and called as such:
 * TopVotedCandidate obj = new TopVotedCandidate(persons, times);
 * int param_1 = obj.q(t);
 */
