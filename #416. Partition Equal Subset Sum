// 1D DP
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        if(nums.size() == 0) return true;
        
        int total = accumulate(nums.begin(), nums.end(), 0);
        
        if(total%2 != 0) return false;
        
        total /= 2;
        // dp[j] means can we have sum j from given subset of nums
        vector<bool> dp(total+1, false);
        
        dp[0] = true;
        
        for(int num:nums){
            // we cannot do the loop from num to total because in that way we will use one valuefor multiple times
            // consider num == 2, if the for loop is from i = num to i = total
            // then dp will be true for dp[2], dp[4](since dp[4-2] is true), dp[6](since dp[6-2] is true), and so on
            // this means we use 2 for multiple times which is not valid
            for(int i = total; i >= num; i--){
                dp[i] = dp[i] || dp[i-num];
            }
        }
        return dp[total];
    }
};


//////////////////////////////////
// 2D DP
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        if(nums.size() == 0) return true;
        
        int total = accumulate(nums.begin(), nums.end(), 0);
        
        if(total%2 != 0) return false;
        
        total /= 2;
        int n = nums.size();
        // can subset from first i elements form sum j
        vector<vector<bool>> dp(n+1, vector<bool>(total+1, false));
        
        for(int i = 0; i < n+1; i++) dp[i][0] = true;
        
        for(int i = 1; i < n+1; i++){
            // the line below can also be: for(int j = 1; j < total+1; j++) or for(int j = nums[i-1]; j < total+1; j++)
            // the second one is because we can get the true label from the inherit hierachy
            for(int j = total; j >= 1; j--){
                dp[i][j] = dp[i-1][j];
                if(j-nums[i-1] >= 0) dp[i][j] = dp[i][j] || dp[i-1][j-nums[i-1]];
            }
        }
        return dp[n][total];
    }
};
