class Solution:
    def findOcurrences(self, text: str, first: str, second: str) -> List[str]:
        s = text.split();
        res = [];
        for i in range(len(s) - 2):
            if s[i] == first and s[i+1] == second: res.append(s[i+2]);
        return res;


//////////////////////////
class Solution {
public:
    vector<string> findOcurrences(string text, string first, string second) {
        vector<string> s, res;
        stringstream ss(text);
        string temp;
        while(ss >> temp) s.push_back(temp);
        for(int i = 0; i < s.size() - 2; ++i){
            if(s[i] == first && s[i+1] == second) res.push_back(s[i+2]);
        }
        return res;
    }
};


/////////////////////////
// not very efficient solution
class Solution {
public:
    vector<string> findOcurrences(string text, string first, string second) {
        unordered_set<int> s1, s2;
        unordered_map<int, string> m;
        stringstream ss(text);
        int crt = 0;
        string temp;
        while(ss >> temp){
            m[crt] = temp;
            if(temp == first) s1.insert(crt);
            if(temp == second) s2.insert(crt);
            ++crt;
        }
        vector<string> res;
        for(auto num:s1){
            if(s2.count(num+1) && m.count(num+2)) res.push_back(m[num+2]);
        }
        return res;
    }
};
