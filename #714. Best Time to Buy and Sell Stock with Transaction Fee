class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        // the idea is the same as infinite transection
        // the difference is that we need to pay transection fee every time we buy a stock
        int T_ik0 = 0, T_ik1 = INT_MIN, temp;
        for(int price:prices){
            temp = T_ik0;
            T_ik0 = max(T_ik0, T_ik1 + price);
            T_ik1 = max(T_ik1, temp - price - fee);
        }
        return T_ik0;
    }
};


//////////////////////////////////
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int crt_max = prices[0], crt_min = prices[0], res = 0;
        for(int i = 1; i < prices.size(); i++){
            // update crt_max if current value is greater than crt_max
            if(crt_max < prices[i]) crt_max = prices[i];
            // if current prices is less than crt_min or less than crt_max-fee
            // note than we need both conditions here
            if(prices[i] < crt_min || prices[i] < crt_max - fee){
                // only trade when there is profit
                if(crt_max - crt_min > fee) res += crt_max - crt_min - fee;
                // update crt_max and crt_min
                crt_max = prices[i];
                crt_min = prices[i];
            }
        }
        return res + max(0, crt_max - crt_min - fee);
    }
};



///////////////////////////////////////////////
// DP
//Definition:
//hold[i] - the maximum profit you can earn if you have to hold at day[i]
//sold[i] - the maximum profit you can earn if you have to sold at day[i]

//Formula:
//hold[i] = max(hold[i - 1], sold[i - 1] - p[i])       // if hold at [i-1], no op; if sold at [i-1], buy at [i] with cost of p[i];
//sold[i] = max(sold[i - 1], hold[i - 1] + p[i] - fee) // if sold at [i-1], no op; if hold at [i-1], sell at [i] with gain of p[i] - fee;

//Initialization:
//hold[0] = 0 - price[0];  // buy shares with cost of p[0];
//sold[0] = 0;             // no op no cost;
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        if(n < 2) return 0;
        vector<int> hold(n, 0), sold(n, 0);
        hold[0] = -prices[0];
        for(int i = 1; i < n; i++){
            hold[i] = max(hold[i-1], sold[i-1] -prices[i]);
            sold[i] = max(sold[i-1], hold[i-1] + prices[i] - fee);
        }
        return max(hold[n-1], sold[n-1]);
    }
};
