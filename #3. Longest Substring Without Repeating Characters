class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> v(256, 0);
        int l = 0, r = 0, res = 0;
        while(r < s.size()){
            while(v[s[r]] == 0 && r < s.size()){
                v[s[r]]++;
                res = max(res, r-l+1);
                r++;
            }
            if(r == s.size()) break;
            // at this point, we have two s[r] in substring and v[s[r]] == 1, note that s[r] is the only duplicate char in current substring
            // now we try to find another s[r] with in range [l,r]
            while(s[l] != s[r]){
                // since s[r] is the only duplicate char, v[s[l]]-- cannot become less than 0 
                v[s[l]]--;
                l++;
            }
            // now s[l] == s[r]
            // increase both l and r
            l++;
            r++;
        }
        return res;
    }
};
