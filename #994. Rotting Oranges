class Solution {
public:
    // BFS
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        queue<pair<int, int>> q;
        int total = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] != 0) ++total;
                if(grid[i][j] == 2) q.push({i, j});
            }
        }
        if(total == 0) return 0;
        int crtNum = 0, time = -1;
        while(!q.empty()){
            ++time;
            int num = q.size();
            crtNum += num;
            if(crtNum == total) return time;
            for(int i = 0; i < num; i++){
                auto crt = q.front();
                q.pop();
                int x = crt.first, y = crt.second;
                if(x-1 >= 0 && grid[x-1][y] == 1){
                    q.push({x-1, y});
                    grid[x-1][y] = 2;
                }
                if(x+1 < m && grid[x+1][y] == 1){
                    q.push({x+1, y});
                    grid[x+1][y] = 2;
                }
                if(y-1 >= 0 && grid[x][y-1] == 1){
                    q.push({x, y-1});
                    grid[x][y-1] = 2;
                }
                if(y+1 < n && grid[x][y+1] == 1){
                    q.push({x, y+1});
                    grid[x][y+1] = 2;
                }
            }
        }
        return -1;
    }
};
