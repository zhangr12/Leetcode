class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
        vector<int> res;
        if(matrix.size() == 0) return res;
        // when prev == true, we do up, otherwise we do down
        bool prev = true;
        int i = 0, j = 0, n = matrix.size(), m = matrix[0].size();
        while(!(i == n-1 && j == m-1)){
            // go up and down alternatively
            if(prev){
                helper_up(matrix, res, i, j);
                // cout << i << " " << j << endl;
                if(j == m-1){
                    i++;
                }
                else{
                    i = 0;
                }
                j = min(j+1, m-1);
                prev = false;
            }
            else{
                helper_down(matrix, res, i, j);
                if(i == n-1){
                    j++;
                }
                else{
                    j = 0;
                }
                i = min(n-1, i+1);
                prev = true;
            }
        }
        res.push_back(matrix[n-1][m-1]);
        return res;
    }
    
    // i, j is the start element for this up traverse
    void helper_up(vector<vector<int>>& matrix, vector<int> &res, int &i, int &j){
        int m = matrix[0].size();
        while(i >= 0 && j < m){
            res.push_back(matrix[i][j]);
            i--;
            j++;
        }
        // we did one more step in the while loop, need to take one step back
        i++;
        j--;
    }
    
    // i, j is the start element for this up traverse
    void helper_down(vector<vector<int>>& matrix, vector<int> &res, int &i, int &j){
        int n = matrix.size();
        while(i < n && j >= 0){
            res.push_back(matrix[i][j]);
            i++;
            j--;
        }
        // we did one more step in the while loop, need to take one step back
        i--;
        j++;
    }
};
