/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    // reservior sampling
    // 1) Create an array reservoir[0..k-1] and copy first k items of stream[] to it.
    // 2) Now one by one consider all items from (k+1)th item to nth item.
    // …a) Generate a random number from 0 to i where i is index of current item in stream[]. Let the generated random number is j.
    // …b) If j is in range 0 to k-1, replace reservoir[j] with arr[i]
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    Solution(ListNode* head) {
        this->head = head;
    }
    
    /** Returns a random node's value. */
    int getRandom() {
        ListNode* crt = head;
        int res = crt->val, count = 1;
        crt = crt->next;
        while(crt){
            if(rand()%++count == 0) res = crt->val;
            crt = crt->next;
        }
        return res;
    }
private:
    ListNode *head;
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
 
 
 
 
 ////////////////////////////////
 // naive algorithm
 class Solution {
public:
    int length = 0;
    ListNode* node;
    ListNode* original;
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    Solution(ListNode* head) {
        original = head;
        node = head;
        while(node != NULL){
            length++;
            node = node->next;
        }
        node = head;
    }
    
    /** Returns a random node's value. */
    int getRandom() {
        int n = rand()%length, res;
        for(int i = 0; i < n; i++){
            node = node->next;
        }
        res = node->val;
        node = original;
        return res;
    }
};
