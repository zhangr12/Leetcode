class Solution {
public:
    // idea: greedy algorithm, whenever a couple is not sit with his/her partner
    // swap his/her partner to his side
    int minSwapsCouples(vector<int>& row) {
        // m1: position->value
        // m2: value->position
        unordered_map<int, int> m1, m2;
        for(int i = 0; i < row.size(); i++){
            m1[i] = row[i];
            m2[row[i]] = i;
        }
        int res = 0;
        for(int i = 0; i < row.size(); i+=2){
            if((m1[i]%2 && m1[i+1] == m1[i]-1) || (m1[i]%2 == 0 && m1[i+1] == m1[i]+1)) continue;
            res++;
            // swap m[i]'s partner to correct place
            // before: p1    p2
            //         v1    v2
            // after:  p1    p2
            //         v2    v1
            int v2;
            if(m1[i]%2){
                v2 = m1[i]-1;
            }
            else{
                v2 = m1[i]+1;
            }
            int p2 = m2[v2], v1 = m1[i+1];
            m1[i+1] = v2;
            m1[p2] = v1;
            m2[v2] = i+1;
            m2[v1] = p2;
        }
        return res;
    }
};
