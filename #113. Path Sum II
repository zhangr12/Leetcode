/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 // recursive solution, better than traditional queue based BFS
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> res;
        if(!root) return res;
        vector<int> temp;
        temp.push_back(root->val);
        helper(root, res, temp, root->val, sum);
        
        return res;
    }
    
    // here, crtV is the nodes' value up to current node(include), crtSum also included current node
    void helper(TreeNode* node, vector<vector<int>> &res, vector<int> &crtV, int crtSum, int sum){
        if(!node->left && !node->right){
            if(crtSum == sum) res.push_back(crtV);
            return;
        }
        
        if(node->left){
            crtV.push_back(node->left->val);
            helper(node->left, res, crtV, crtSum + node->left->val, sum);
            crtV.pop_back();
        }
        if(node->right){
            crtV.push_back(node->right->val);
            helper(node->right, res, crtV, crtSum + node->right->val, sum);
            crtV.pop_back();
        }
        return;
    }
    
};






/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 // traditional BFS solution
 // this solution is inefficient
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        return BFS(root, sum);
    }
    
    vector<vector<int>> BFS(TreeNode* root, int sum){
        vector<vector<int>> res;
        if(!root) return res;
        
        // TreeNode is the current node
        // int stores the sum until current node
        // vector<int> stores value of nodes from root to current node
        queue<pair<TreeNode*, pair<int, vector<int>>>> q;
        
        q.push({root, {root->val, {root->val}}});
        
        while(!q.empty()){
            int num = q.size();
            for(int i = 0; i < num; i++){
                pair<TreeNode*, pair<int, vector<int>>> temp = q.front();
                q.pop();
                //TreeNode* crt = temp.first;
                //auto temp1 = temp.second;
                //int crtSum = temp1.first;
                //vector<int> v = temp1.second;
                if(temp.first->left == NULL && temp.first->right == NULL && temp.second.first == sum){
                    res.push_back(temp.second.second);
                }
                else{
                    vector<int> v = temp.second.second;
                    if(temp.first->left){
                        v.push_back(temp.first->left->val);
                        q.push({temp.first->left, {temp.second.first + temp.first->left->val, v}});
                        v.pop_back();
                    }
                    if(temp.first->right){
                        vector<int> v = temp.second.second;
                        v.push_back(temp.first->right->val);
                        q.push({temp.first->right, {temp.second.first + temp.first->right->val, v}});
                    }
                }
            }
        }
        return res;
    }
};
