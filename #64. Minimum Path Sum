class Compare {
public:
    bool operator() (vector<int> &a, vector<int> &b){
        return a[0] > b[0];
    }
};

// Dijkstra's Algorithm
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dis(m, vector<int>(n, INT_MAX));
        dis[0][0] = grid[0][0];
        priority_queue<vector<int>, vector<vector<int>>, Compare> q;
        q.push({dis[0][0], 0, 0});
        vector<int> temp;
        while(!q.empty()){
            temp = q.top();
            q.pop();
            int dist = temp[0], x = temp[1], y = temp[2];
            if(x == m-1 && y == n-1) return dist;
            if(x + 1 < m && dis[x+1][y] > dis[x][y] + grid[x+1][y]){
                dis[x+1][y] = dis[x][y] + grid[x+1][y];
                q.push({dis[x+1][y], x+1, y});
            }
            if(y + 1 < n && dis[x][y+1] > dis[x][y] + grid[x][y+1]){
                dis[x][y+1] = dis[x][y] + grid[x][y+1];
                q.push({dis[x][y+1], x, y+1});
            }
        }
    }
};
