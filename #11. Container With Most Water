// The widest container (using first and last line) is a good candidate, because of its width. Its water level is the height of the smaller one of first and last line.
// All other containers are less wide and thus would need a higher water level in order to hold more water.
// The smaller one of first and last line doesn't support a higher water level and can thus be safely removed from further consideration.
class Solution {
public:
    int maxArea(vector<int>& height) {
        int l = 0, r = height.size() - 1;
        int res = 0;
        while(l < r){
            int h = min(height[l], height[r]);
            res = max(res, h*(r-l));
            while(height[l] <= h && l < r) l++;
            while(height[r] <= h && l < r) r--;
        }
        return res;
    }
};
