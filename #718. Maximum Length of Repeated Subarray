class Solution {
public:
    int findLength(vector<int>& A, vector<int>& B) {
        // take convolution between A and B
        // thenfind the Maximum Length of Repeated Subarray for each discrete convolution
        if(A.size() == 0 || B.size() == 0) return 0;
        int m = A.size(), n = B.size(), res = 0;
        for(int k = 1; k < m+n; k++){
            int temp = 0;
            for(int i = 0; i < n; i++){
                int idx = k-n+i;
                if(idx >= 0 && idx < m){
                    if(A[idx] == B[i]){
                        temp++;
                        res = max(res, temp);
                    }
                    else{
                        temp = 0;
                    }
                }
            }
        }
        return res;
    }
};


////////////////////////////////////
// dp method O(MN) space, O(MN) time
class Solution {
public:
    int findLength(vector<int>& A, vector<int>& B) {
        int m = A.size(), n = B.size();
        if(m == 0 || n == 0) return 0;
        // dp[i][j]: length of longest repeated subarray with ending A[i] and B[j]
        vector<vector<int>> dp(m, vector<int>(n, 0));
        // initialization
        int res = 0;
        for(int i = 0; i < m; i++){
            if(A[i] == B[0]){
                dp[i][0] = 1;
                res = 1;
            }
        }
        for(int i = 0; i < n; i++){
            if(B[i] == A[0]){
                dp[0][i] = 1;
                res = 1;
            }
        }
        // transition formular: if(A[i] != B[j]) dp[i][j] = 0
        // else dp[i][j] = dp[i-1][j-1] + 1
        for(int i = 1; i < m; i++){
            for(int j = 0; j < n; j++){
                if(A[i] == B[j]){
                    dp[i][j] = dp[i-1][j-1] + 1;
                    res = max(res, dp[i][j]);
                }
            }
        }
        return res;
    }
};
