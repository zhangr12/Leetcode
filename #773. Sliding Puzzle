class Solution {
public:
    // idea: BFS
    int slidingPuzzle(vector<vector<int>>& board) {
        unordered_set<string> seen;
        queue<string> q;
        string start = "";
        for(int i = 0; i < 2; ++i){
            for(int j = 0; j < 3; ++j) start += to_string(board[i][j]);
        }
        seen.insert(start);
        q.push(start);
        int step = 0;
        while(!q.empty()){
            int num = q.size();
            for(int i = 0; i < num; ++i){
                string crt = q.front();
                q.pop();
                if(isValid(crt)) return step;
                // check all possible permutations
                for(int i = 0; i < 2; ++i){
                    for(int j = 0; j < 3; ++j){
                        if(crt[i*3+j] != '0') continue;
                        // check four directions for i,j
                        int crtIdx = i*3 + j;
                        if(i-1 >= 0){
                            int targetIdx = (i-1)*3+j;
                            swap(crt[crtIdx], crt[targetIdx]);
                            if(!seen.count(crt)){
                                seen.insert(crt);
                                q.push(crt);
                            }
                            swap(crt[crtIdx], crt[targetIdx]);
                        }
                        if(i+1 < 2){
                            int targetIdx = (i+1)*3+j;
                            swap(crt[crtIdx], crt[targetIdx]);
                            if(!seen.count(crt)){
                                seen.insert(crt);
                                q.push(crt);
                            }
                            swap(crt[crtIdx], crt[targetIdx]);
                        }
                        if(j-1 >= 0){
                            int targetIdx = i*3+j-1;
                            swap(crt[crtIdx], crt[targetIdx]);
                            if(!seen.count(crt)){
                                seen.insert(crt);
                                q.push(crt);
                            }
                            swap(crt[crtIdx], crt[targetIdx]);
                        }
                        if(j+1 < 3){
                            int targetIdx = i*3+j+1;
                            swap(crt[crtIdx], crt[targetIdx]);
                            if(!seen.count(crt)){
                                seen.insert(crt);
                                q.push(crt);
                            }
                            swap(crt[crtIdx], crt[targetIdx]);
                        }
                    }
                }
            }
            ++step;
        }
        return -1;
    }
    
    bool isValid(string s){
        if(s == "123450") return true;
        return false;
    }
};
