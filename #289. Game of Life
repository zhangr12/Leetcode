class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int n = board.size(), m = board[0].size();
        vector<vector<int>> countMat(n, vector<int>(m, 0));
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                countMat[i][j] = count(board, i, j);
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(board[i][j] == 1){
                    if(countMat[i][j] < 2){
                        board[i][j] = 0;
                    }
                    else if(countMat[i][j] == 2 || countMat[i][j] == 3){
                        board[i][j] = 1;
                    }
                    else{
                        board[i][j] = 0;
                    }
                }
                else if(countMat[i][j] == 3){
                    board[i][j] = 1;
                }
            }
        }
    }
    
    // count number of alive in the neighbors
    int count(vector<vector<int>>& board, int i, int j){
        int res = 0, n = board.size(), m = board[0].size();
        if(i-1 >= 0 && board[i-1][j] == 1) res++;
        if(i-1 >= 0 && j-1 >= 0 && board[i-1][j-1] == 1) res++;
        if(i-1 >= 0 && j+1 < m && board[i-1][j+1] == 1) res++;
        if(j-1 >= 0 && board[i][j-1] == 1) res++;
        if(j+1 < m && board[i][j+1] == 1) res++;
        if(i+1 < n && j-1 >= 0 && board[i+1][j-1] == 1) res++;
        if(i+1 < n && board[i+1][j] == 1) res++;
        if(i+1 < n && j+1 < m && board[i+1][j+1] == 1) res++;
        return res;
    }
};



/////////////////////////////////////////
// solution with O(1) space and O(mn) time copmlexity
// idea, use the second digit to remember the result for next round
// after updating, go through the matrix again and use the second digit only
class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int n = board.size(), m = board[0].size(), temp;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                temp = count(board, i, j);
                if(board[i][j] == 1){
                    if(temp < 2 || temp > 3){
                        board[i][j] += 10*0;
                    }
                    else{
                        board[i][j] += 10*1;
                    }
                }
                else{
                    if(temp == 3){
                        board[i][j] += 10*1;
                    }
                    else{
                        board[i][j] += 10*0;
                    }
                }
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                board[i][j] /= 10;
            }
        }
    }
    
    
    int count(vector<vector<int>>& board, int i, int j){
        int res = 0, n = board.size(), m = board[0].size();
        if(i-1 >= 0 && board[i-1][j]%10 == 1) res++;
        if(i-1 >= 0 && j-1 >= 0 && board[i-1][j-1]%10 == 1) res++;
        if(i-1 >= 0 && j+1 < m && board[i-1][j+1]%10 == 1) res++;
        if(j-1 >= 0 && board[i][j-1]%10 == 1) res++;
        if(j+1 < m && board[i][j+1]%10 == 1) res++;
        if(i+1 < n && j-1 >= 0 && board[i+1][j-1]%10 == 1) res++;
        if(i+1 < n && board[i+1][j]%10 == 1) res++;
        if(i+1 < n && j+1 < m && board[i+1][j+1]%10 == 1) res++;
        return res;
    }
    
};
