class Solution {
public:
    bool isNStraightHand(vector<int>& hand, int W) {
        if(hand.size()%W != 0) return false;
        map<int, int> m;
        for(int h:hand) m[h]++;
        vector<vector<int>> v;
        for(auto item:m) v.push_back({item.first, item.second});
        int start = 0, num_groups, start_num;
        // if start == v.size(), this means we grouped all the pairs, jump out of the while loop and return true
        while(start < v.size()){
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! this step is important
            // if left elements is less than W, cannot finish the length W group, return false
            if(start+W-1 >= v.size()) return false;
            num_groups = v[start][1];
            start_num = v[start][0];
            int temp = -1;
            for(int i = 0; i < W; i++){
                if(v[start + i][1] < num_groups || v[start+i][0] != start_num+i) return false;
                v[start + i][1] -= num_groups;
                // record the first card that cannot be totally grouped
                if(v[start + i][1] > 0 && temp == -1) temp = start + i;
            }
            // if we grouped past W cards totally, we jump to W+1 th card, which is start + W
            if(temp == -1){
                start += W;
            }
            else{
                // else jump to temp
                start = temp;
            }
        }
        return true;
    }
};
