class Solution {
public:
    bool PredictTheWinner(vector<int>& nums) {
        if(nums.size()%2 == 0) return true;
        int n = nums.size();
        // matrix dp record the difference between the player1 and player2
        // dp[i][j] means if the sequence is nums[i]~nums[j], what is the difference between player1 and 2
        vector<vector<int>> dp(n, vector<int>(n, 0));
        // if there is only one item in nums, then the diff between player1 and 2 is the item(since nothing for player2 to take)
        for(int i = 0; i < n; i++) dp[i][i] = nums[i];
        // the updating start from the second diagnal of the matrix, then the third diagnal,...,
        // until we reach the corner of the matrix, dp[0][n-1]
        for(int i = 1; i < n; i++){
            for(int j = 0; i+j < n; j++){
                // for nums[j]~nums[j+i]
                // the player1 can either pick nums[j] or nums[j+i]
                // if player1 picks nums[j], then player2 becomes the one that pick first for sequence nums[j+1]~nums[j+i]
                // so dp[j+1][j+i] can be treated as player2-player1 for sequence nums[j+1]~nums[j+i]
                // then the result when player pick nums[j] is nums[j] - dp[j+1][i+j]
                // similar to the second term nums[j+i] - dp[j][j+i-1]
                dp[j][j+i] = max(nums[j] - dp[j+1][i+j], nums[j+i] - dp[j][j+i-1]);
            }
        }
        return dp[0][n-1] >= 0;
    }
};
